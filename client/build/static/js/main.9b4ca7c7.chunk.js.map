{"version":3,"sources":["reducers/arguments.js","reducers/index.js","api/index.js","actions/arguments.js","components/Arguments/Argument/styles.js","components/Arguments/Argument/GenerateSummary.js","components/Form/ReplyForm.js","components/Graph/Graph.js","components/Arguments/Argument/Argument.js","components/Arguments/styles.js","components/Arguments/Arguments.js","components/Form/styles.js","components/Form/ActionArgumentForm.js","components/Form/ExpertOpinionArgumentForm.js","components/Form/PositionToKnowForm.js","styles.js","App.js","index.js"],"names":["initialState","combineReducers","argumentSchemas","arguments","length","undefined","action","type","payload","map","schema","_id","id","isAttackedBy","attackerId","baseURL","updateIsAttackedBy","async","axios","post","concat","api","dispatch","error","console","log","message","getArgumentSchemas","data","get","createActionSchema","actionSchema","newActionSchema","createExpertOpinionSchema","expertOpinionSchema","newExpertOpinionSchema","createPositionToKnowSchema","positionToKnowSchema","newPositionToKnowSchema","useStyles","makeStyles","theme","card","position","cardContent","expandedCard","top","left","width","height","zIndex","expandedCardContent","overflowY","backgroundColor","padding","spacing","collapseButton","right","expandIconContainer","bottom","fontSize","centerContent","display","justifyContent","alignItems","minHeight","summaryContainer","replyButton","border","borderRadius","color","palette","text","primary","transition","secondary","generateSummary","argumentSchema","R","A","S","G","V","E","D","P","ReplyForm","_ref","onSubmit","onCancel","clickedNode","criticalQuestions","setCriticalQuestions","useState","selectedQuestion","setSelectedQuestion","selectedArgumentType","setSelectedArgumentType","formData","setFormData","isReply","chosenCriticalQuestion","useEffect","response","fetch","ok","Error","argument_schema","json","find","questions","fetchCriticalQuestions","useDispatch","handleChange","event","name","value","target","getInitialFormData","argumentType","React","createElement","e","preventDefault","action_creator","endpoint","created_argument","style","maxWidth","htmlFor","onChange","question","key","selected_type","renderFormFields","Fragment","placeholder","Graph","startingNodeId","handleNodeClick","svg_ref","useRef","evaluate_button_ref","cleanup_ref","argument_schemas","svg","d3","current","selectAll","remove","nodes_group","append","rendered_nodes","Set","renderNodes","node","x","y","nodesGroup","has","attr","on","add","initial_y_position","forEach","index","attacker_node","arrow_start_x_position","arrow_start_y_position","arrow_end_x_position","arrow_end_y_position","line_length","Math","sqrt","arrowhead_x_position","arrowhead_y_position","angle","atan2","size","PI","critical_question_id","mid_x_position","mid_y_position","second_arrowhead_angle","second_arrowhead_distance","second_arrowhead_x_position","cos","second_arrowhead_y_position","sin","handleEvaluateGraphClick","evaluated_nodes","winning_nodes","losing_nodes","undecided_nodes","unevaluated_nodes","evaluateNode","nodeId","delete","attacker_evaluations","every","status","some","addEventListener","removeEventListener","window","innerWidth","innerHeight","fetchData","ref","margin","marginRight","Argument","classes","expanded","setExpanded","setClickedNode","argumentSummary","setArgumentSummary","isCardExpanded","setIsCardExpanded","replyButtonDisplayed","setReplyButtonDisplayed","showReplyForm","setShowReplyForm","fetchArgumentSchema","argumentId","summary","handleCancel","handleReplyFormSubmit","handleReplyFormCancel","handleReply","prevState","Card","className","CardContent","Typography","variant","gutterBottom","renderReplyButton","Button","onClick","disabled","renderReplyForm","CardActions","handleExpandClick","BiCollapseAlt","FaExpand","mainContainer","smMargin","actionDiv","textAlign","Arguments","useSelector","state","filtered_arguments","filter","argument","Grid","container","item","xs","sm","handleOpenDiscussion","CircularProgress","root","paper","form","flexWrap","fileInput","buttonSubmit","marginBottom","ActionArgumentForm","Container","component","TextField","required","fullWidth","label","submit","ExpertOpinionForm","PositionToKnowForm","multiline","minRows","appBar","flexDirection","heading","image","marginLeft","App","selectedForm","setSelectedForm","selectedArgument","setSelectedArgument","AppBar","align","Grow","in","onArgumentSelect","FormControl","InputLabel","Select","labelId","MenuItem","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9b4ca7c7.chunk.js","sourcesContent":["const initialState = [];\n\nexport default (argumentSchemas = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_ALL':\n      return action.payload;\n    case 'CREATE_POSITION_TO_KNOW_SCHEMA':\n    case 'CREATE_ACTION_SCHEMA':\n    case 'CREATE_EXPERT_OPINION_SCHEMA':\n      return [...argumentSchemas, action.payload];\n    case 'UPDATE_IS_ATTACKED_BY':\n      return argumentSchemas.map(schema => {\n        if (schema._id === action.payload.id) {\n          return {\n            ...schema,\n            isAttackedBy: [...schema.isAttackedBy, action.payload.attackerId]\n          };\n        }\n        return schema;\n      });\n\n    default:\n      return argumentSchemas;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport argumentSchemas from './arguments';\n\nexport default combineReducers({ argumentSchemas });","import axios from 'axios';\n\nconst baseURL = 'https://argupedia.onrender.com/argumentSchemas';\n\nexport const fetchArgumentSchemas = () => axios.get(baseURL);\nexport const createActionSchema = (newActionSchema) => axios.post(`${baseURL}/action`, newActionSchema);\nexport const createExpertOpinionSchema = (newExpertOpinionSchema) => axios.post(`${baseURL}/expert-opinion`, newExpertOpinionSchema);\nexport const createPositionToKnowSchema = (newPositionToKnowSchema) => axios.post(`${baseURL}/position-to-know`, newPositionToKnowSchema);\nexport const updateIsAttackedBy = (id, attackerId) => axios.post(`${baseURL}/updateIsAttackedBy`, { id, attackerId });\n","import * as api from '../api';\n\nexport const FETCH_ALL = 'FETCH_ALL';\nexport const CREATE_ACTION_SCHEMA = 'CREATE_ACTION_SCHEMA';\nexport const CREATE_EXPERT_OPINION_SCHEMA = 'CREATE_EXPERT_OPINION_SCHEMA';\nexport const CREATE_POSITION_TO_KNOW_SCHEMA = 'CREATE_POSITION_TO_KNOW_SCHEMA';\nexport const UPDATE_IS_ATTACKED_BY = 'UPDATE_IS_ATTACKED_BY';\n\nexport const updateIsAttackedBy = (id, attackerId) => async (dispatch) => {\n    try {\n        await api.updateIsAttackedBy(id, attackerId);\n        dispatch({ type: 'UPDATE_IS_ATTACKED_BY', payload: { id, attackerId }});\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const getArgumentSchemas = () => async (dispatch) => {\n    try {\n        const { data } = await api.fetchArgumentSchemas();\n        dispatch({ type: FETCH_ALL, payload: data });\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const createActionSchema = (actionSchema) => async (dispatch) => {\n    try {\n        const { data } = await api.createActionSchema(actionSchema);\n        dispatch({ type: CREATE_ACTION_SCHEMA, payload: data });\n        return data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const createExpertOpinionSchema = (expertOpinionSchema) => async (dispatch) => {\n    try {\n        const { data } = await api.createExpertOpinionSchema(expertOpinionSchema);\n        dispatch({ type: CREATE_EXPERT_OPINION_SCHEMA, payload: data });\n        return data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const createPositionToKnowSchema = (positionToKnowSchema) => async (dispatch) => {\n    try {\n        const { data } = await api.createPositionToKnowSchema(positionToKnowSchema);\n        dispatch({ type: CREATE_POSITION_TO_KNOW_SCHEMA, payload: data });\n        return data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    position: 'relative',\n  },\n  cardContent: {\n  },\n  expandedCard: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    zIndex: 9999,\n  },\n  expandedCardContent: {\n    width: '100%',\n    height: '100%',\n    overflowY: 'auto',\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    padding: theme.spacing(2),\n  },\n  collapseButton: {\n    position: 'absolute',\n    top: theme.spacing(1),\n    right: theme.spacing(1),\n  },\n  expandIconContainer: {\n    position: 'absolute',\n    bottom: theme.spacing(1),\n    right: theme.spacing(1),\n    '& svg': {\n      fontSize: '2rem',\n    },\n  },\n  centerContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minHeight: '100%',\n  },\n  summaryContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  replyButton: {\n    padding: '8px 16px', \n    border: '1px solid #ccc', \n    borderRadius: '4px', \n    backgroundColor: '#ffffff', \n    color: theme.palette.text.primary, \n    transition: 'background-color 0.3s, color 0.3s', \n    '&:hover': {\n      backgroundColor: '#f0f0f0',\n      color: theme.palette.text.secondary, \n    },\n    position: 'absolute',\n    top: theme.spacing(1), \n    right: theme.spacing(1), \n  },\n\n}));\n\nexport default useStyles;\n","const generateSummary = (argumentSchema) => {\n    const { R, A, S, G, V, E, D, P } = argumentSchema;\n\n    if (R && A && S && G && V) {\n        return `In the current circumstances ${R}, we should perform action ${A}, which will result in new circumstances ${S}, realizing goal ${G}, promoting value ${V}`;\n    } else if (E && D && A) {\n        return `Source ${E} is an expert in subject domain ${D} containing proposition ${A}, ${E} asserts that ${A} is true, therefore ${A} is true`;\n    } else if (P && A) {\n        return `${P} is in a position to know whether ${A} is true or not, ${P} asserts that ${A} is true, therefore ${A} is true`;\n    } else {\n        return 'No summary available';\n    }\n};\n\nexport default generateSummary; ","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateIsAttackedBy, createActionSchema, createExpertOpinionSchema, createPositionToKnowSchema } from '../../actions/arguments';\n\nconst ReplyForm = ({ onSubmit, onCancel, clickedNode }) => {\n    const [criticalQuestions, setCriticalQuestions] = useState([]);\n    const [selectedQuestion, setSelectedQuestion] = useState('');\n    const [selectedArgumentType, setSelectedArgumentType] = useState('');\n    const [formData, setFormData] = useState({\n        R: '',\n        A: '',\n        S: '',\n        G: '',\n        V: '',\n        isReply: true,\n        chosenCriticalQuestion: selectedQuestion,\n    });\n\n    useEffect(() => {\n        console.log(\"Clicked Node:\", clickedNode);\n\n        const fetchCriticalQuestions = async () => {\n            try {\n                const response = await fetch(`https://argupedia.onrender.com/argumentSchemas`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch argument schemas');\n                }\n                const argument_schemas = await response.json();\n\n                const argument_schema = argument_schemas.find(schema => schema._id === clickedNode);\n                if (!argument_schema) {\n                    throw new Error('Argument schema not found');\n                }\n\n                console.log(\"Argument Schema:\", argument_schema); \n\n                let questions = [];\n\n                if (argument_schema.R && argument_schema.A && argument_schema.S && argument_schema.G && argument_schema.V) {\n                    questions = [\n                        { id: 1, text: `Are the believed circumstances \"${argument_schema.R}\" true?` },\n                        { id: 2, text: `Does the goal \"${argument_schema.G}\" realize the value \"${argument_schema.V}\" stated?` },\n                        { id: 3, text: `Are there alternative ways of promoting the same values \"${argument_schema.V}\"?` },\n                        { id: 4, text: `Is the action \"${argument_schema.A}\" possible?` },\n                    ];\n                } else if (argument_schema.E && argument_schema.D && argument_schema.A) {\n                    questions = [\n                        { id: 5, text: `How credible is \"${argument_schema.E}\" as an expert?` },\n                        { id: 6, text: `Is \"${argument_schema.E}\" an expert in the field that \"${argument_schema.A}\" is in?` },\n                        { id: 7, text: `Is \"${argument_schema.E}\" personally reliable and trustworthy?` },\n                        { id: 8, text: `Is \"${argument_schema.A}\" consistent with what other experts assert?` },\n                    ];\n                } else if (argument_schema.P && argument_schema.A) {\n                    questions = [\n                        { id: 9, text: `Is \"${argument_schema.P}\" really in a position to know whether \"${argument_schema.A}\" is true?` },\n                        { id: 10, text: `Is \"${argument_schema.P}\" an honest, trustworthy and reliable source?` },\n                        { id: 11, text: `Did \"${argument_schema.P}\" really assert that \"${argument_schema.A}\" is true?` },\n                    ];\n                } else {\n                    questions = [\n                        { id: 12, text: 'No critical questions available' }\n                    ];\n                }\n\n                console.log(\"Critical Questions:\", questions); \n                setCriticalQuestions(questions);\n            } catch (error) {\n                    console.log('Error fetching critical questions:', error);\n            }\n        };\n\n        if (clickedNode) {\n            fetchCriticalQuestions();\n        }\n\n    }, [clickedNode, selectedQuestion]);\n\n    const renderFormFields = () => {\n        switch (selectedArgumentType) {\n            case 'Action Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"In the current circumstances R\"\n                            name=\"R\"\n                            value={formData.R}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"we should perform action A\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"resulting in new circumstances S\"\n                            name=\"S\"\n                            value={formData.S}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"realizing goal G\"\n                            name=\"G\"\n                            value={formData.G}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"promoting value V\"\n                            name=\"V\"\n                            value={formData.V}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            case 'Expert Opinion Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"E is an expert\"\n                            name=\"E\"\n                            value={formData.E}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"in subject domain D\"\n                            name=\"D\"\n                            value={formData.D}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"who proposes that A is true\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            case 'Position to Know Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"P is in a position to know\"\n                            name=\"P\"\n                            value={formData.P}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"whether proposition A is true or not\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            default:\n                return null;\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const payload = { ...formData, isAttackedBy: [], isReply: true, chosenCriticalQuestion: selectedQuestion };\n\n        let action_creator;\n        let endpoint;\n\n        switch (selectedArgumentType) {\n            case 'Action Argument':\n                action_creator = createActionSchema;\n                endpoint = 'https://argupedia.onrender.com/argumentSchemas/action';\n                break;\n            case 'Expert Opinion Argument':\n                action_creator = createExpertOpinionSchema;\n                endpoint = 'https://argupedia.onrender.com/argumentSchemas/expert-opinion';\n                break;\n            case 'Position to Know Argument':\n                action_creator = createPositionToKnowSchema;\n                endpoint = 'https://argupedia.onrender.com/argumentSchemas/position-to-know';\n                break;\n            default:\n                console.error('Invalid argument type');\n                return;\n        }\n\n        console.log('Payload sent to createArgument action:', payload);\n\n        try {\n            const created_argument = await dispatch(action_creator(payload, endpoint));\n\n            if (created_argument && created_argument._id) {\n                if (created_argument.chosenCriticalQuestion === 3 || created_argument.chosenCriticalQuestion === 8) {\n                    await dispatch(updateIsAttackedBy(created_argument._id, clickedNode));\n                    await dispatch(updateIsAttackedBy(clickedNode, created_argument._id));\n                } else {\n                    await dispatch(updateIsAttackedBy(clickedNode, created_argument._id));\n                }\n                console.log(\"created argument's chosen critical q id:\", created_argument.chosenCriticalQuestion);\n            }\n\n            setFormData(getInitialFormData(selectedArgumentType));\n        } catch (error) {\n            console.log(`Error creating ${selectedArgumentType} schema:`, error);\n        }\n\n    };\n\n    const handleSelectQuestion = (event) => {\n        setSelectedQuestion(event.target.value);\n    };\n\n    const handleSelectArgumentType = (event) => {\n        const selected_type = event.target.value;\n        setSelectedArgumentType(selected_type);\n        setFormData(getInitialFormData(selected_type));\n    };\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormData({\n            ...formData,\n            [name]: value\n        });\n    };\n\n    const getInitialFormData = (argumentType) => {\n        switch (argumentType) {\n            case 'Action Argument':\n                return {\n                    R: '',\n                    A: '',\n                    S: '',\n                    G: '',\n                    V: ''\n                };\n            case 'Expert Opinion Argument':\n                return {\n                    E: '',\n                    D: '',\n                    A: ''\n                };\n            case 'Position to Know Argument':\n                return {\n                    P: '',\n                    A: ''\n                };\n            default:\n                return {};\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} style={{ maxWidth: '400px' }}>\n\n            <div>\n                <label htmlFor=\"criticalQuestion\">Select Critical Question:</label>\n                <select id=\"criticalQuestion\" value={selectedQuestion} onChange={handleSelectQuestion}>\n                    <option value=\"\">Select</option>\n                    {criticalQuestions.map(question => (\n                        <option key={question.id} value={question.id}>\n                            {question.text}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            <div>\n                <label htmlFor=\"argumentType\">Select Argument Type:</label>\n                <select id=\"argumentType\" value={selectedArgumentType} onChange={handleSelectArgumentType}>\n                    <option value=\"\">Select</option>\n                    <option value=\"Action Argument\">Action Argument</option>\n                    <option value=\"Expert Opinion Argument\">Expert Opinion Argument</option>\n                    <option value=\"Position to Know Argument\">Position to Know Argument</option>\n                </select>\n            </div>\n\n            {renderFormFields()}\n\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default ReplyForm;\n","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst Graph = ({ startingNodeId, handleNodeClick }) => {\n  const svg_ref = useRef(null);\n  const evaluate_button_ref = useRef(null);\n  const cleanup_ref = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://argupedia.onrender.com/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argument_schemas = await response.json();\n        const argument_schema = argument_schemas.find(schema => schema._id === startingNodeId);\n        if (!argument_schema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svg_ref.current);\n        svg.selectAll('*').remove();\n        const nodes_group = svg.append('g');\n\n        const rendered_nodes = new Set();\n\n        const renderNodes = (node, x, y, nodesGroup) => {\n          if (!node || !node._id || rendered_nodes.has(node._id)) return;\n\n          const radius = 20;\n          const attacker_spacing = 150;\n\n          if (!rendered_nodes.has(node._id)) {\n\n            nodesGroup.append('circle')\n              .attr('id', `node-${node._id}`)\n              .attr('cx', x)\n              .attr('cy', y)\n              .attr('r', radius)\n              .attr('fill', '#1f77b4')\n              .on('click', () => {\n                if (handleNodeClick) {\n                  handleNodeClick(node._id);\n                }\n              });\n\n            rendered_nodes.add(node._id);\n          }\n\n          if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n            const initial_y_position = y - (node.isAttackedBy.length - 1) * attacker_spacing / 2;\n\n            node.isAttackedBy.forEach((attackerId, index) => {\n\n              if (!rendered_nodes.has(attackerId)) {\n                const attacker_node = argument_schemas.find(schema => schema._id === attackerId);\n\n                const attacker_y_position = initial_y_position + index * attacker_spacing;\n\n                const arrow_start_x_position = x;\n                const arrow_start_y_position = y;\n                const arrow_end_x_position = x + (attacker_spacing - radius);\n                const arrow_end_y_position = attacker_y_position;\n\n                const line_length = Math.sqrt((arrow_end_x_position - arrow_start_x_position) ** 2 + (arrow_end_y_position - arrow_start_y_position) ** 2);\n\n                const arrowhead_x_position = arrow_start_x_position + (radius / line_length) * (arrow_end_x_position - arrow_start_x_position);\n                const arrowhead_y_position = arrow_start_y_position + (radius / line_length) * (arrow_end_y_position - arrow_start_y_position);\n\n                const angle = Math.atan2(arrow_end_y_position - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n\n                nodesGroup.append('line')\n                  .attr('x1', arrowhead_x_position)\n                  .attr('y1', arrowhead_y_position)\n                  .attr('x2', arrow_end_x_position)\n                  .attr('y2', arrow_end_y_position)\n                  .attr('stroke', '#000000')\n                  .attr('stroke-width', 2);\n\n                nodesGroup.append('path')\n                  .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                  .attr('transform', `translate(${arrowhead_x_position},${arrowhead_y_position}) rotate(${angle * (180 / Math.PI) - 90})`)\n                  .attr('fill', '#000000');\n\n                const critical_question_id = attacker_node.chosenCriticalQuestion;\n\n                if (critical_question_id === 3 || critical_question_id === 8) {\n\n                  const mid_x_position = (arrow_start_x_position + arrow_end_x_position) / 2;\n                  const mid_y_position = (arrow_start_y_position + arrow_end_y_position) / 2;\n\n                  const second_arrowhead_angle = Math.atan2(arrow_end_y_position - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n\n                  const second_arrowhead_distance = 30;\n                  const second_arrowhead_x_position = mid_x_position + second_arrowhead_distance * Math.cos(second_arrowhead_angle);\n                  const second_arrowhead_y_position = mid_y_position + second_arrowhead_distance * Math.sin(second_arrowhead_angle);\n\n                  nodesGroup.append('path')\n                    .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                    .attr('transform', `translate(${second_arrowhead_x_position},${second_arrowhead_y_position}) rotate(${second_arrowhead_angle * (180 / Math.PI) + 90})`)\n                    .attr('fill', '#000000');\n                }\n\n                renderNodes(attacker_node, arrow_end_x_position, arrow_end_y_position, nodesGroup);\n              }\n            });\n          }\n        };\n\n        const handleEvaluateGraphClick = async () => {\n          const evaluated_nodes = new Set(); \n          const winning_nodes = new Set();\n          const losing_nodes = new Set();\n          const undecided_nodes = new Set(); \n          const unevaluated_nodes = new Set(rendered_nodes); \n\n          const evaluateNode = (nodeId) => {\n            if (evaluated_nodes.has(nodeId)) {\n              if (winning_nodes.has(nodeId)) return 'winning';\n              if (losing_nodes.has(nodeId)) return 'losing';\n              return 'undecided'; \n            }\n        \n            evaluated_nodes.add(nodeId); \n            unevaluated_nodes.delete(nodeId); \n        \n            const node = argument_schemas.find(schema => schema._id === nodeId);\n            if (!node) {\n              console.error('Node not found:', nodeId);\n              return 'unevaluated';\n            }\n        \n            if (node.isAttackedBy.length === 0) {\n              winning_nodes.add(nodeId);\n              return 'winning';\n            } else {\n              let attacker_evaluations = node.isAttackedBy.map(attackerId => evaluateNode(attackerId));\n              \n              if (attacker_evaluations.every(status => status === 'losing')) {\n                winning_nodes.add(nodeId);\n                return 'winning';\n              } else if (attacker_evaluations.some(status => status === 'winning')) {\n                losing_nodes.add(nodeId);\n                return 'losing';\n              } else {\n                undecided_nodes.add(nodeId);\n                return 'undecided';\n              }\n            }\n          };\n        \n          evaluateNode(argument_schema._id);\n        \n          winning_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'green'));\n          losing_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'red'));\n          undecided_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'grey'));\n          unevaluated_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'lightgrey')); // Color these nodes differently if needed\n        \n          console.log(\"Winning nodes:\", [...winning_nodes]);\n          console.log(\"Losing nodes:\", [...losing_nodes]);\n          console.log(\"Undecided nodes:\", [...undecided_nodes]);\n          console.log(\"Unevaluated nodes:\", [...unevaluated_nodes]);\n          console.log(\"Rendered nodes:\", [...rendered_nodes]);\n        };\n\n        if (evaluate_button_ref.current) {\n          evaluate_button_ref.current.addEventListener('click', handleEvaluateGraphClick);\n        }\n\n        cleanup_ref.current = () => {\n          if (evaluate_button_ref.current) {\n            evaluate_button_ref.current.removeEventListener('click', handleEvaluateGraphClick);\n          }\n        };\n\n        renderNodes(argument_schema, window.innerWidth / 3, window.innerHeight / 2, nodes_group);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (cleanup_ref.current) {\n        cleanup_ref.current();\n      }\n    };\n  }, [startingNodeId, handleNodeClick]);\n\n  return (\n    <div style={{ position: 'relative', width: window.innerWidth * 0.95, height: window.innerHeight }}>\n      <svg ref={svg_ref} width=\"100%\" height=\"100%\" style={{ border: '1px solid #ccc' }} />\n      <button\n        ref={evaluate_button_ref}\n        style={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          padding: '10px',\n          margin: '10px',\n          zIndex: 1000\n        }}\n      >\n        Evaluate Graph\n      </button>\n      <div style={{ position: 'absolute', top: '50px', right: '10px', zIndex: 1000 }}>\n        <span style={{ color: 'green', marginRight: '10px' }}>Winning</span>\n        <span style={{ color: 'red', marginRight: '10px' }}>Losing</span>\n        <span style={{ color: 'grey' }}>Undecided</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;","import React, { useState, useEffect } from 'react';\nimport { Card, CardActions, CardContent, Button, Typography } from '@material-ui/core';\nimport { BiCollapseAlt } from \"react-icons/bi\";\nimport { FaExpand } from \"react-icons/fa\";\nimport useStyles from './styles';\nimport generateSummary from './GenerateSummary.js';\nimport ReplyForm from '../../Form/ReplyForm.js';\nimport Graph from '../../Graph/Graph.js';\n\nconst Argument = ({ argumentSchema }) => {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const [clickedNode, setClickedNode] = useState(null);\n    const [argumentSummary, setArgumentSummary] = useState(generateSummary(argumentSchema));\n    const [isCardExpanded, setIsCardExpanded] = useState(false);\n    const [replyButtonDisplayed, setReplyButtonDisplayed] = useState(true);\n    const [showReplyForm, setShowReplyForm] = useState(false);\n\n    useEffect(() => {\n        if (clickedNode) {\n            fetchArgumentSchema(clickedNode);\n        } else if (isCardExpanded) {\n            setArgumentSummary('Click a node');\n        } else {\n            setArgumentSummary(generateSummary(argumentSchema));\n        }\n\n    }, [clickedNode, isCardExpanded, argumentSchema]);\n\n    const handleNodeClick = (argumentId) => {\n        if (clickedNode === argumentId) {\n            setClickedNode(null);\n            setReplyButtonDisplayed(true); \n            setShowReplyForm(false); \n        } else {\n            setClickedNode(argumentId);\n            setReplyButtonDisplayed(true); \n            setShowReplyForm(false); \n        }\n    };\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n        setIsCardExpanded(!isCardExpanded);\n        setShowReplyForm(false); \n        if (!expanded) {\n            setClickedNode(null);\n            setArgumentSummary(generateSummary(argumentSchema));\n        }\n    };\n\n    const fetchArgumentSchema = async (argumentId) => {\n        try {\n            const response = await fetch(`https://argupedia.onrender.com/argumentSchemas`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch argument schemas');\n            }\n            const argument_schemas = await response.json();\n\n            const argument_schema = argument_schemas.find(schema => schema._id === argumentId);\n\n            if (argument_schema) {\n                const summary = generateSummary(argument_schema);\n                setArgumentSummary(summary);\n            } else {\n                setArgumentSummary('No summary available');\n            }\n            console.log(\"Clicked Node's isAttackedBy:\", argument_schema.isAttackedBy);\n        } catch (error) {\n            console.error('Error fetching argument schemas:', error);\n            setArgumentSummary('Error fetching argument schemas');\n        }\n    };\n\n    const handleCancel = () => {\n        setClickedNode(null);\n        setReplyButtonDisplayed(true);\n        setShowReplyForm(false); \n    };\n\n    const renderReplyButton = () => {\n        if (expanded && clickedNode !== null) {\n            if (replyButtonDisplayed) {\n                return (\n                    <Button className={classes.replyButton} size=\"small\" color=\"default\" onClick={handleReply} disabled={clickedNode === null}>\n                        Reply\n                    </Button>\n                );\n            } else {\n                return (\n                    <Button className={classes.replyButton} size=\"small\" color=\"default\" onClick={handleCancel} disabled={clickedNode === null}>\n                        Cancel\n                    </Button>\n                );\n            }\n        }\n    };\n\n    const handleReplyFormSubmit = (event) => {\n        event.preventDefault();\n    };\n\n    const handleReplyFormCancel = () => {\n        setShowReplyForm(false);\n    };\n\n    const renderReplyForm = () => {\n        if (showReplyForm) {\n            return (\n                <ReplyForm onSubmit={handleReplyFormSubmit} onCancel={handleReplyFormCancel} clickedNode={clickedNode} />\n            );\n        }\n    };\n\n    const handleReply = () => {\n        console.log('reply button clicked');\n        setReplyButtonDisplayed(prevState => !prevState);\n        setShowReplyForm(true); \n    };\n\n    return (\n        <Card className={`${classes.card} ${expanded ? classes.expandedCard : ''}`}>\n            <CardContent className={`${classes.cardContent} ${expanded ? classes.expandedCardContent : ''}`}>\n                <div className={classes.summaryContainer}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        {argumentSummary}\n                    </Typography>\n                    {expanded && clickedNode !== null && (\n                        <div key={replyButtonDisplayed ? 'replyButton' : 'cancelButton'}>\n                            {renderReplyButton()}\n                        </div>\n                    )}\n                </div>\n                {renderReplyForm()}\n                <div className={classes.centerContent}>\n                    {expanded && (\n                        <Graph\n                        startingNodeId={argumentSchema._id}\n                        handleNodeClick={handleNodeClick}\n                      />\n                    )}\n                </div>\n                <CardActions>\n                    <div className={classes.expandIconContainer}>\n                        <Button size=\"small\" color=\"default\" onClick={handleExpandClick}>\n                            {expanded ? <BiCollapseAlt /> : <FaExpand />}\n                        </Button>\n                    </div>\n                </CardActions>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default Argument;","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n    mainContainer: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    smMargin: {\n        margin: theme.spacing(1),\n    },\n    actionDiv: {\n        textAlign: 'center',\n    },\n}));","import React from 'react';\nimport Argument from './Argument/Argument';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\n\nimport useStyles from './styles';\n\nconst Arguments = () => {\n  const argument_schemas = useSelector((state) => state.argumentSchemas);\n  const classes = useStyles();\n\n  const filtered_arguments = argument_schemas.filter(argument => !argument.isReply);\n\n  const generateSummary = (argumentSchema) => {\n    const { R, A, S, G, V, E, D, P } = argumentSchema;\n\n    if (R && A && S && G && V) {\n      return `In the current circumstances ${R}, we should perform action ${A}, which will result in new circumstances ${S}, realizing goal ${G}, promoting value ${V}`;\n    } else if (E && D && A) {\n      return `Source ${E} is an expert in subject domain ${D} containing proposition ${A}, ${E} asserts that ${A} is true, therefore ${A} is true`;\n    } else if (P && A) {\n      return `${P} is in a position to know whether ${A} is true or not, ${P} asserts that ${A} is true, therefore ${A} is true`;\n    } else {\n      return 'No summary available';\n    }\n  };\n\n  const handleOpenDiscussion = (summary) => {\n    console.log('Discussion opened with summary:', summary);\n  };\n\n  return (\n    !filtered_arguments.length ? <CircularProgress /> : (\n      <Grid className={classes.mainContainer} container alignItems='stretch' spacing={3}>\n        {filtered_arguments.map((argumentSchema, index) => (\n          <Grid key={index} item xs={12} sm={6}>\n            <Argument argumentSchema={argumentSchema} handleOpenDiscussion={() => handleOpenDiscussion(generateSummary(argumentSchema))} />\n          </Grid>\n        ))}\n      </Grid>\n    )\n  );\n};\n\nexport default Arguments;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  fileInput: {\n    width: '97%',\n    margin: '10px 0',\n  },\n  buttonSubmit: {\n    marginBottom: 10,\n  },\n}));","import React, { useState } from 'react';\nimport { TextField, Button, Typography, Container } from '@material-ui/core';\nimport useStyles from './styles';\nimport { useDispatch } from 'react-redux';\nimport { createActionSchema } from '../../actions/arguments';\n\nconst ActionArgumentForm = () => {\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        R: '',\n        A: '',\n        S: '',\n        G: '',\n        V: '',\n        isReply: false,\n        chosenCriticalQuestion: null,\n    });\n\n    const dispatch = useDispatch();\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const payload = { ...formData, isAttackedBy: [] };\n\n        const endpoint = 'https://argupedia.onrender.com/argumentSchemas/action';\n        console.log('Payload sent to createArgument action:', payload);\n\n        if ('R' in formData && 'A' in formData && 'S' in formData && 'G' in formData && 'V' in formData) {\n            try {\n                await dispatch(createActionSchema(payload, endpoint));\n                setFormData({\n                    R: '',\n                    A: '',\n                    S: '',\n                    G: '',\n                    V: '',\n                    isReply: false,\n                    chosenCriticalQuestion: null,\n                });\n            } catch (error) {\n                console.log(\"Error creating action schema:\", error)\n            }\n        } else {\n            console.error('Missing properties in formData:', formData);\n        }\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Create a new action argument\n                </Typography>\n                <form className={classes.form} onSubmit={handleSubmit}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"R\"\n                        label={`In the current circumstances R,`}\n                        name=\"R\"\n                        value={formData.R}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"A\"\n                        label={`we should perform action A,`}\n                        name=\"A\"\n                        value={formData.A}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"S\"\n                        label={`resulting in new circumstances S,`}\n                        name=\"S\"\n                        value={formData.S}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"G\"\n                        label={`realizing goal G,`}\n                        name=\"G\"\n                        value={formData.G}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"V\"\n                        label={`promoting value V`}\n                        name=\"V\"\n                        value={formData.V}\n                        onChange={handleChange}\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n};\n\nexport default ActionArgumentForm;\n","import React, { useState } from 'react';\nimport { TextField, Button, Typography, Container } from '@material-ui/core';\nimport useStyles from './styles';\nimport { useDispatch } from 'react-redux';\nimport { createExpertOpinionSchema } from '../../actions/arguments';\n\nconst ExpertOpinionForm = () => {\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        E: '',\n        D: '',\n        A: '',\n        isReply: false,\n        chosenCriticalQuestion: null,\n    });\n\n    const dispatch = useDispatch();\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const payload = { ...formData, isAttackedBy: [] };\n\n        const endpoint = 'https://argupedia.onrender.com/argumentSchemas/expert-opinion'; \n        console.log('Payload sent to createArgument expert-opinion:', payload);\n\n        if ('E' in formData && 'D' in formData && 'A' in formData) {\n            try {\n                await dispatch(createExpertOpinionSchema(payload, endpoint));\n                setFormData({\n                    E: '',\n                    D: '',\n                    A: '',\n                    isReply: false,\n                    chosenCriticalQuestion: null,\n                });\n            } catch (error) {\n                console.log(\"Error creating expert opinion schema:\", error)\n            }\n        } else {\n            console.error('Missing properties in formData:', formData);\n        }\n    }; \n    \n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Create a new expert opinion argument\n                </Typography>\n                <form className={classes.form} onSubmit={handleSubmit}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"E\"\n                        label={`E is an expert`}\n                        name=\"E\"\n                        value={formData.E}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"D\"\n                        label={`in subject domain D`}\n                        name=\"D\"\n                        value={formData.D}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"A\"\n                        label={`who proposes that A is true`}\n                        name=\"A\"\n                        value={formData.A}\n                        onChange={handleChange}\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n};\n\nexport default ExpertOpinionForm;\n","import React, { useState } from 'react';\nimport { TextField, Button, Typography, Container } from '@material-ui/core';\nimport useStyles from './styles';\nimport { useDispatch } from 'react-redux';\nimport { createPositionToKnowSchema } from '../../actions/arguments';\n\nconst PositionToKnowForm = () => {\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        P: '',\n        A: '',\n        isReply: false,\n        chosenCriticalQuestion: null,\n    });\n\n    const dispatch = useDispatch();\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const payload = { ...formData, isAttackedBy: [] };\n\n        const endpoint = 'https://argupedia.onrender.com/argumentSchemas/position-to-know'; \n        console.log('Payload sent to createArgument position-to-know:', payload);\n\n        if ('P' in formData && 'A' in formData) {\n            try {\n                await dispatch(createPositionToKnowSchema(payload, endpoint));\n                setFormData({\n                    P: '',\n                    A: '',\n                    isReply: false,\n                    chosenCriticalQuestion: null,\n                });      \n            } catch (error) {\n                console.log(\"Error creating position to know schema\", error);\n            }\n        } else {\n            console.error('Missing properties in formData:', formData);\n        }\n    };  \n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Create a new position to know argument\n                </Typography>\n                <form className={classes.form} onSubmit={handleSubmit}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"P\"\n                        label={`P is in a position to know`}\n                        name=\"P\"\n                        value={formData.P}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"A\"\n                        label={`whether proposition A is true or not`}\n                        name=\"A\"\n                        value={formData.A}\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        fullWidth\n                        multiline\n                        minRows={4}\n                        disabled\n                        label={`P asserts that proposition A is true`}\n                        value={`${formData.P} asserts that proposition \"${formData.A}\" is true`}\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n};\n\nexport default PositionToKnowForm;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles(() => ({\n    appBar: {\n        borderRadius: 15,\n        margin: '30px 0',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    heading: {\n        color: 'rgba(143, 46, 6, 0.93)',\n    },\n    image: {\n        marginLeft: '15px',\n    },\n}));","import React, { useState, useEffect } from \"react\";\nimport { Container, AppBar, Typography, Grow, Grid, FormControl, InputLabel, Select, MenuItem } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { getArgumentSchemas } from \"./actions/arguments.js\";\nimport Arguments from \"./components/Arguments/Arguments.js\";\nimport ActionArgumentForm from \"./components/Form/ActionArgumentForm.js\";\nimport ExpertOpinionForm from \"./components/Form/ExpertOpinionArgumentForm.js\";\nimport PositionToKnowForm from \"./components/Form/PositionToKnowForm.js\";\nimport useStyles from \"./styles.js\";\n\nimport Graph from \"./components/Graph/Graph.js\";\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const argumentSchemas = useSelector(state => state.argumentSchemas);\n  const [selectedForm, setSelectedForm] = useState(\"ActionArgumentForm\");\n  const [selectedArgument, setSelectedArgument] = useState(null);\n\n  useEffect(() => {\n    dispatch(getArgumentSchemas());\n  }, [dispatch]);\n\n  const handleFormChange = (event) => {\n    setSelectedForm(event.target.value);\n  };\n\n  const handleArgumentSelect = (argument) => {\n    setSelectedArgument(argument);\n  };\n\n  const filtered_arguments = argumentSchemas.filter(argument => !argument.isReply);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n        <Typography className={classes.heading} variant=\"h2\" align=\"center\">\n          Argupedia\n        </Typography>\n      </AppBar>\n      <Grow in>\n        <Container>\n          <Grid container justifyContent=\"space-between\" alignItems=\"stretch\" spacing={3}>\n            <Grid item xs={12} sm={7}>\n              <Arguments arguments={filtered_arguments} onArgumentSelect={handleArgumentSelect} />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <FormControl fullWidth>\n                <InputLabel id=\"argument-type-label\">Select Argument Type</InputLabel>\n                <Select\n                  labelId=\"argument-type-label\"\n                  id=\"argument-type\"\n                  value={selectedForm}\n                  onChange={handleFormChange}\n                >\n                  <MenuItem value=\"ActionArgumentForm\">Action Argument</MenuItem>\n                  <MenuItem value=\"ExpertOpinionForm\">Expert Opinion Argument</MenuItem>\n                  <MenuItem value=\"PositionToKnowForm\">Position to Know Argument</MenuItem>\n                </Select>\n              </FormControl>\n              {selectedForm === \"ActionArgumentForm\" && <ActionArgumentForm />}\n              {selectedForm === \"ExpertOpinionForm\" && <ExpertOpinionForm />}\n              {selectedForm === \"PositionToKnowForm\" && <PositionToKnowForm />}\n            </Grid>\n          </Grid>\n        </Container>\n      </Grow>\n      {selectedArgument && <Graph argument={selectedArgument} />}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from './reducers';\n\nimport App from './App';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}