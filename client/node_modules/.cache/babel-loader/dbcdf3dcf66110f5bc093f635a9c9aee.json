{"ast":null,"code":"import React from'react';import Argument from'./Argument/Argument';import{Grid,CircularProgress}from'@material-ui/core';import{useSelector}from'react-redux';import useStyles from'./styles';const Arguments=()=>{const argument_schemas=useSelector(state=>state.argumentSchemas);const classes=useStyles();const filtered_arguments=argument_schemas.filter(argument=>!argument.isReply);const generateSummary=argumentSchema=>{const{R,A,S,G,V,E,D,P}=argumentSchema;if(R&&A&&S&&G&&V){return\"In the current circumstances \".concat(R,\", we should perform action \").concat(A,\", which will result in new circumstances \").concat(S,\", realizing goal \").concat(G,\", promoting value \").concat(V);}else if(E&&D&&A){return\"Source \".concat(E,\" is an expert in subject domain \").concat(D,\" containing proposition \").concat(A,\", \").concat(E,\" asserts that \").concat(A,\" is true, therefore \").concat(A,\" is true\");}else if(P&&A){return\"\".concat(P,\" is in a position to know whether \").concat(A,\" is true or not, \").concat(P,\" asserts that \").concat(A,\" is true, therefore \").concat(A,\" is true\");}else{return'No summary available';}};const handleOpenDiscussion=summary=>{console.log('Discussion opened with summary:',summary);};return!filtered_arguments.length?/*#__PURE__*/React.createElement(CircularProgress,null):/*#__PURE__*/React.createElement(Grid,{className:classes.mainContainer,container:true,alignItems:\"stretch\",spacing:3},filtered_arguments.map((argumentSchema,index)=>/*#__PURE__*/React.createElement(Grid,{key:index,item:true,xs:12,sm:6},/*#__PURE__*/React.createElement(Argument,{argumentSchema:argumentSchema,handleOpenDiscussion:()=>handleOpenDiscussion(generateSummary(argumentSchema))}))));};export default Arguments;","map":{"version":3,"names":["React","Argument","Grid","CircularProgress","useSelector","useStyles","Arguments","argument_schemas","state","argumentSchemas","classes","filtered_arguments","filter","argument","isReply","generateSummary","argumentSchema","R","A","S","G","V","E","D","P","concat","handleOpenDiscussion","summary","console","log","length","createElement","className","mainContainer","container","alignItems","spacing","map","index","key","item","xs","sm"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Arguments/Arguments.js"],"sourcesContent":["import React from 'react';\nimport Argument from './Argument/Argument';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\n\nimport useStyles from './styles';\n\nconst Arguments = () => {\n  const argument_schemas = useSelector((state) => state.argumentSchemas);\n  const classes = useStyles();\n\n  const filtered_arguments = argument_schemas.filter(argument => !argument.isReply);\n\n  const generateSummary = (argumentSchema) => {\n    const { R, A, S, G, V, E, D, P } = argumentSchema;\n\n    if (R && A && S && G && V) {\n      return `In the current circumstances ${R}, we should perform action ${A}, which will result in new circumstances ${S}, realizing goal ${G}, promoting value ${V}`;\n    } else if (E && D && A) {\n      return `Source ${E} is an expert in subject domain ${D} containing proposition ${A}, ${E} asserts that ${A} is true, therefore ${A} is true`;\n    } else if (P && A) {\n      return `${P} is in a position to know whether ${A} is true or not, ${P} asserts that ${A} is true, therefore ${A} is true`;\n    } else {\n      return 'No summary available';\n    }\n  };\n\n  const handleOpenDiscussion = (summary) => {\n    console.log('Discussion opened with summary:', summary);\n  };\n\n  return (\n    !filtered_arguments.length ? <CircularProgress /> : (\n      <Grid className={classes.mainContainer} container alignItems='stretch' spacing={3}>\n        {filtered_arguments.map((argumentSchema, index) => (\n          <Grid key={index} item xs={12} sm={6}>\n            <Argument argumentSchema={argumentSchema} handleOpenDiscussion={() => handleOpenDiscussion(generateSummary(argumentSchema))} />\n          </Grid>\n        ))}\n      </Grid>\n    )\n  );\n};\n\nexport default Arguments;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,QAAQ,KAAM,qBAAqB,CAC1C,OAASC,IAAI,CAAEC,gBAAgB,KAAQ,mBAAmB,CAC1D,OAASC,WAAW,KAAQ,aAAa,CAEzC,MAAO,CAAAC,SAAS,KAAM,UAAU,CAEhC,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAAAC,gBAAgB,CAAGH,WAAW,CAAEI,KAAK,EAAKA,KAAK,CAACC,eAAe,CAAC,CACtE,KAAM,CAAAC,OAAO,CAAGL,SAAS,CAAC,CAAC,CAE3B,KAAM,CAAAM,kBAAkB,CAAGJ,gBAAgB,CAACK,MAAM,CAACC,QAAQ,EAAI,CAACA,QAAQ,CAACC,OAAO,CAAC,CAEjF,KAAM,CAAAC,eAAe,CAAIC,cAAc,EAAK,CAC1C,KAAM,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAE,CAAC,CAAGR,cAAc,CAEjD,GAAIC,CAAC,EAAIC,CAAC,EAAIC,CAAC,EAAIC,CAAC,EAAIC,CAAC,CAAE,CACzB,sCAAAI,MAAA,CAAuCR,CAAC,gCAAAQ,MAAA,CAA8BP,CAAC,8CAAAO,MAAA,CAA4CN,CAAC,sBAAAM,MAAA,CAAoBL,CAAC,uBAAAK,MAAA,CAAqBJ,CAAC,EACjK,CAAC,IAAM,IAAIC,CAAC,EAAIC,CAAC,EAAIL,CAAC,CAAE,CACtB,gBAAAO,MAAA,CAAiBH,CAAC,qCAAAG,MAAA,CAAmCF,CAAC,6BAAAE,MAAA,CAA2BP,CAAC,OAAAO,MAAA,CAAKH,CAAC,mBAAAG,MAAA,CAAiBP,CAAC,yBAAAO,MAAA,CAAuBP,CAAC,aACpI,CAAC,IAAM,IAAIM,CAAC,EAAIN,CAAC,CAAE,CACjB,SAAAO,MAAA,CAAUD,CAAC,uCAAAC,MAAA,CAAqCP,CAAC,sBAAAO,MAAA,CAAoBD,CAAC,mBAAAC,MAAA,CAAiBP,CAAC,yBAAAO,MAAA,CAAuBP,CAAC,aAClH,CAAC,IAAM,CACL,MAAO,sBAAsB,CAC/B,CACF,CAAC,CAED,KAAM,CAAAQ,oBAAoB,CAAIC,OAAO,EAAK,CACxCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAEF,OAAO,CAAC,CACzD,CAAC,CAED,MACE,CAAChB,kBAAkB,CAACmB,MAAM,cAAG9B,KAAA,CAAA+B,aAAA,CAAC5B,gBAAgB,KAAE,CAAC,cAC/CH,KAAA,CAAA+B,aAAA,CAAC7B,IAAI,EAAC8B,SAAS,CAAEtB,OAAO,CAACuB,aAAc,CAACC,SAAS,MAACC,UAAU,CAAC,SAAS,CAACC,OAAO,CAAE,CAAE,EAC/EzB,kBAAkB,CAAC0B,GAAG,CAAC,CAACrB,cAAc,CAAEsB,KAAK,gBAC5CtC,KAAA,CAAA+B,aAAA,CAAC7B,IAAI,EAACqC,GAAG,CAAED,KAAM,CAACE,IAAI,MAACC,EAAE,CAAE,EAAG,CAACC,EAAE,CAAE,CAAE,eACnC1C,KAAA,CAAA+B,aAAA,CAAC9B,QAAQ,EAACe,cAAc,CAAEA,cAAe,CAACU,oBAAoB,CAAEA,CAAA,GAAMA,oBAAoB,CAACX,eAAe,CAACC,cAAc,CAAC,CAAE,CAAE,CAC1H,CACP,CACG,CACP,CAEL,CAAC,CAED,cAAe,CAAAV,SAAS"},"metadata":{},"sourceType":"module"}