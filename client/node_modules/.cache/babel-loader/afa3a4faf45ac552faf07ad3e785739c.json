{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Card,CardActions,CardContent,Button,Typography}from'@material-ui/core';import{BiCollapseAlt}from\"react-icons/bi\";import{FaExpand}from\"react-icons/fa\";import useStyles from'./styles';import generateSummary from'./GenerateSummary.js';import ReplyForm from'../../Form/ReplyForm.js';import Graph from'../../Graph/Graph.js';const Argument=_ref=>{let{argumentSchema}=_ref;const classes=useStyles();const[expanded,setExpanded]=useState(false);const[clickedNode,setClickedNode]=useState(null);const[argumentSummary,setArgumentSummary]=useState(generateSummary(argumentSchema));const[isCardExpanded,setIsCardExpanded]=useState(false);const[replyButtonDisplayed,setReplyButtonDisplayed]=useState(true);const[showReplyForm,setShowReplyForm]=useState(false);useEffect(()=>{if(clickedNode){fetchArgumentSchema(clickedNode);}else if(isCardExpanded){setArgumentSummary('Click a node');}else{setArgumentSummary(generateSummary(argumentSchema));}},[clickedNode,isCardExpanded,argumentSchema]);const handleNodeClick=argumentId=>{if(clickedNode===argumentId){setClickedNode(null);setReplyButtonDisplayed(true);setShowReplyForm(false);}else{setClickedNode(argumentId);setReplyButtonDisplayed(true);setShowReplyForm(false);}};const handleExpandClick=()=>{setExpanded(!expanded);setIsCardExpanded(!isCardExpanded);setShowReplyForm(false);if(!expanded){setClickedNode(null);setArgumentSummary(generateSummary(argumentSchema));}};const fetchArgumentSchema=async argumentId=>{try{const response=await fetch(\"https://argupedia.onrender.com/argumentSchemas\");if(!response.ok){throw new Error('Failed to fetch argument schemas');}const argument_schemas=await response.json();const argument_schema=argument_schemas.find(schema=>schema._id===argumentId);if(argument_schema){const summary=generateSummary(argument_schema);setArgumentSummary(summary);}else{setArgumentSummary('No summary available');}console.log(\"Clicked Node's isAttackedBy:\",argument_schema.isAttackedBy);}catch(error){console.error('Error fetching argument schemas:',error);setArgumentSummary('Error fetching argument schemas');}};const handleCancel=()=>{setClickedNode(null);setReplyButtonDisplayed(true);setShowReplyForm(false);};const renderReplyButton=()=>{if(expanded&&clickedNode!==null){if(replyButtonDisplayed){return/*#__PURE__*/React.createElement(Button,{className:classes.replyButton,size:\"small\",color:\"default\",onClick:handleReply,disabled:clickedNode===null},\"Reply\");}else{return/*#__PURE__*/React.createElement(Button,{className:classes.replyButton,size:\"small\",color:\"default\",onClick:handleCancel,disabled:clickedNode===null},\"Cancel\");}}};const handleReplyFormSubmit=event=>{event.preventDefault();};const handleReplyFormCancel=()=>{setShowReplyForm(false);};const renderReplyForm=()=>{if(showReplyForm){return/*#__PURE__*/React.createElement(ReplyForm,{onSubmit:handleReplyFormSubmit,onCancel:handleReplyFormCancel,clickedNode:clickedNode});}};const handleReply=()=>{console.log('reply button clicked');setReplyButtonDisplayed(prevState=>!prevState);setShowReplyForm(true);};return/*#__PURE__*/React.createElement(Card,{className:\"\".concat(classes.card,\" \").concat(expanded?classes.expandedCard:'')},/*#__PURE__*/React.createElement(CardContent,{className:\"\".concat(classes.cardContent,\" \").concat(expanded?classes.expandedCardContent:'')},/*#__PURE__*/React.createElement(\"div\",{className:classes.summaryContainer},/*#__PURE__*/React.createElement(Typography,{variant:\"h6\",gutterBottom:true},argumentSummary),expanded&&clickedNode!==null&&/*#__PURE__*/React.createElement(\"div\",{key:replyButtonDisplayed?'replyButton':'cancelButton'},renderReplyButton())),renderReplyForm(),/*#__PURE__*/React.createElement(\"div\",{className:classes.centerContent},expanded&&/*#__PURE__*/React.createElement(Graph,{startingNodeId:argumentSchema._id,handleNodeClick:handleNodeClick})),/*#__PURE__*/React.createElement(CardActions,null,/*#__PURE__*/React.createElement(\"div\",{className:classes.expandIconContainer},/*#__PURE__*/React.createElement(Button,{size:\"small\",color:\"default\",onClick:handleExpandClick},expanded?/*#__PURE__*/React.createElement(BiCollapseAlt,null):/*#__PURE__*/React.createElement(FaExpand,null))))));};export default Argument;","map":{"version":3,"names":["React","useState","useEffect","Card","CardActions","CardContent","Button","Typography","BiCollapseAlt","FaExpand","useStyles","generateSummary","ReplyForm","Graph","Argument","_ref","argumentSchema","classes","expanded","setExpanded","clickedNode","setClickedNode","argumentSummary","setArgumentSummary","isCardExpanded","setIsCardExpanded","replyButtonDisplayed","setReplyButtonDisplayed","showReplyForm","setShowReplyForm","fetchArgumentSchema","handleNodeClick","argumentId","handleExpandClick","response","fetch","ok","Error","argument_schemas","json","argument_schema","find","schema","_id","summary","console","log","isAttackedBy","error","handleCancel","renderReplyButton","createElement","className","replyButton","size","color","onClick","handleReply","disabled","handleReplyFormSubmit","event","preventDefault","handleReplyFormCancel","renderReplyForm","onSubmit","onCancel","prevState","concat","card","expandedCard","cardContent","expandedCardContent","summaryContainer","variant","gutterBottom","key","centerContent","startingNodeId","expandIconContainer"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Arguments/Argument/Argument.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, CardActions, CardContent, Button, Typography } from '@material-ui/core';\nimport { BiCollapseAlt } from \"react-icons/bi\";\nimport { FaExpand } from \"react-icons/fa\";\nimport useStyles from './styles';\nimport generateSummary from './GenerateSummary.js';\nimport ReplyForm from '../../Form/ReplyForm.js';\nimport Graph from '../../Graph/Graph.js';\n\nconst Argument = ({ argumentSchema }) => {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const [clickedNode, setClickedNode] = useState(null);\n    const [argumentSummary, setArgumentSummary] = useState(generateSummary(argumentSchema));\n    const [isCardExpanded, setIsCardExpanded] = useState(false);\n    const [replyButtonDisplayed, setReplyButtonDisplayed] = useState(true);\n    const [showReplyForm, setShowReplyForm] = useState(false);\n\n    useEffect(() => {\n        if (clickedNode) {\n            fetchArgumentSchema(clickedNode);\n        } else if (isCardExpanded) {\n            setArgumentSummary('Click a node');\n        } else {\n            setArgumentSummary(generateSummary(argumentSchema));\n        }\n\n    }, [clickedNode, isCardExpanded, argumentSchema]);\n\n    const handleNodeClick = (argumentId) => {\n        if (clickedNode === argumentId) {\n            setClickedNode(null);\n            setReplyButtonDisplayed(true); \n            setShowReplyForm(false); \n        } else {\n            setClickedNode(argumentId);\n            setReplyButtonDisplayed(true); \n            setShowReplyForm(false); \n        }\n    };\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n        setIsCardExpanded(!isCardExpanded);\n        setShowReplyForm(false); \n        if (!expanded) {\n            setClickedNode(null);\n            setArgumentSummary(generateSummary(argumentSchema));\n        }\n    };\n\n    const fetchArgumentSchema = async (argumentId) => {\n        try {\n            const response = await fetch(`https://argupedia.onrender.com/argumentSchemas`);\n            if (!response.ok) {\n                throw new Error('Failed to fetch argument schemas');\n            }\n            const argument_schemas = await response.json();\n\n            const argument_schema = argument_schemas.find(schema => schema._id === argumentId);\n\n            if (argument_schema) {\n                const summary = generateSummary(argument_schema);\n                setArgumentSummary(summary);\n            } else {\n                setArgumentSummary('No summary available');\n            }\n            console.log(\"Clicked Node's isAttackedBy:\", argument_schema.isAttackedBy);\n        } catch (error) {\n            console.error('Error fetching argument schemas:', error);\n            setArgumentSummary('Error fetching argument schemas');\n        }\n    };\n\n    const handleCancel = () => {\n        setClickedNode(null);\n        setReplyButtonDisplayed(true);\n        setShowReplyForm(false); \n    };\n\n    const renderReplyButton = () => {\n        if (expanded && clickedNode !== null) {\n            if (replyButtonDisplayed) {\n                return (\n                    <Button className={classes.replyButton} size=\"small\" color=\"default\" onClick={handleReply} disabled={clickedNode === null}>\n                        Reply\n                    </Button>\n                );\n            } else {\n                return (\n                    <Button className={classes.replyButton} size=\"small\" color=\"default\" onClick={handleCancel} disabled={clickedNode === null}>\n                        Cancel\n                    </Button>\n                );\n            }\n        }\n    };\n\n    const handleReplyFormSubmit = (event) => {\n        event.preventDefault();\n    };\n\n    const handleReplyFormCancel = () => {\n        setShowReplyForm(false);\n    };\n\n    const renderReplyForm = () => {\n        if (showReplyForm) {\n            return (\n                <ReplyForm onSubmit={handleReplyFormSubmit} onCancel={handleReplyFormCancel} clickedNode={clickedNode} />\n            );\n        }\n    };\n\n    const handleReply = () => {\n        console.log('reply button clicked');\n        setReplyButtonDisplayed(prevState => !prevState);\n        setShowReplyForm(true); \n    };\n\n    return (\n        <Card className={`${classes.card} ${expanded ? classes.expandedCard : ''}`}>\n            <CardContent className={`${classes.cardContent} ${expanded ? classes.expandedCardContent : ''}`}>\n                <div className={classes.summaryContainer}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        {argumentSummary}\n                    </Typography>\n                    {expanded && clickedNode !== null && (\n                        <div key={replyButtonDisplayed ? 'replyButton' : 'cancelButton'}>\n                            {renderReplyButton()}\n                        </div>\n                    )}\n                </div>\n                {renderReplyForm()}\n                <div className={classes.centerContent}>\n                    {expanded && (\n                        <Graph\n                        startingNodeId={argumentSchema._id}\n                        handleNodeClick={handleNodeClick}\n                      />\n                    )}\n                </div>\n                <CardActions>\n                    <div className={classes.expandIconContainer}>\n                        <Button size=\"small\" color=\"default\" onClick={handleExpandClick}>\n                            {expanded ? <BiCollapseAlt /> : <FaExpand />}\n                        </Button>\n                    </div>\n                </CardActions>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default Argument;"],"mappings":"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"},"metadata":{},"sourceType":"module"}