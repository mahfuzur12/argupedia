{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useDispatch}from'react-redux';import{updateIsAttackedBy,createActionSchema,createExpertOpinionSchema,createPositionToKnowSchema}from'../../actions/arguments';const ReplyForm=_ref=>{let{onSubmit,onCancel,clickedNode}=_ref;const[criticalQuestions,setCriticalQuestions]=useState([]);const[selectedQuestion,setSelectedQuestion]=useState('');const[selectedArgumentType,setSelectedArgumentType]=useState('');const[formData,setFormData]=useState({R:'',A:'',S:'',G:'',V:'',isReply:true,chosenCriticalQuestion:selectedQuestion});useEffect(()=>{console.log(\"Clicked Node:\",clickedNode);const fetchCriticalQuestions=async()=>{try{const response=await fetch(\"https://argupedia.onrender.com/argumentSchemas\");if(!response.ok){throw new Error('Failed to fetch argument schemas');}const argument_schemas=await response.json();const argument_schema=argument_schemas.find(schema=>schema._id===clickedNode);if(!argument_schema){throw new Error('Argument schema not found');}console.log(\"Argument Schema:\",argument_schema);let questions=[];if(argument_schema.R&&argument_schema.A&&argument_schema.S&&argument_schema.G&&argument_schema.V){questions=[{id:1,text:\"Are the believed circumstances \\\"\".concat(argument_schema.R,\"\\\" true?\")},{id:2,text:\"Does the goal \\\"\".concat(argument_schema.G,\"\\\" realize the value \\\"\").concat(argument_schema.V,\"\\\" stated?\")},{id:3,text:\"Are there alternative ways of promoting the same values \\\"\".concat(argument_schema.V,\"\\\"?\")},{id:4,text:\"Is the action \\\"\".concat(argument_schema.A,\"\\\" possible?\")}];}else if(argument_schema.E&&argument_schema.D&&argument_schema.A){questions=[{id:5,text:\"How credible is \\\"\".concat(argument_schema.E,\"\\\" as an expert?\")},{id:6,text:\"Is \\\"\".concat(argument_schema.E,\"\\\" an expert in the field that \\\"\").concat(argument_schema.A,\"\\\" is in?\")},{id:7,text:\"Is \\\"\".concat(argument_schema.E,\"\\\" personally reliable and trustworthy?\")},{id:8,text:\"Is \\\"\".concat(argument_schema.A,\"\\\" consistent with what other experts assert?\")}];}else if(argument_schema.P&&argument_schema.A){questions=[{id:9,text:\"Is \\\"\".concat(argument_schema.P,\"\\\" really in a position to know whether \\\"\").concat(argument_schema.A,\"\\\" is true?\")},{id:10,text:\"Is \\\"\".concat(argument_schema.P,\"\\\" an honest, trustworthy and reliable source?\")},{id:11,text:\"Did \\\"\".concat(argument_schema.P,\"\\\" really assert that \\\"\").concat(argument_schema.A,\"\\\" is true?\")}];}else{questions=[{id:12,text:'No critical questions available'}];}console.log(\"Critical Questions:\",questions);setCriticalQuestions(questions);}catch(error){console.log('Error fetching critical questions:',error);}};if(clickedNode){fetchCriticalQuestions();}},[clickedNode,selectedQuestion]);const renderFormFields=()=>{switch(selectedArgumentType){case'Action Argument':return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"In the current circumstances R\",name:\"R\",value:formData.R,onChange:handleChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"we should perform action A\",name:\"A\",value:formData.A,onChange:handleChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"resulting in new circumstances S\",name:\"S\",value:formData.S,onChange:handleChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"realizing goal G\",name:\"G\",value:formData.G,onChange:handleChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"promoting value V\",name:\"V\",value:formData.V,onChange:handleChange}));case'Expert Opinion Argument':return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"E is an expert\",name:\"E\",value:formData.E,onChange:handleChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"in subject domain D\",name:\"D\",value:formData.D,onChange:handleChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"who proposes that A is true\",name:\"A\",value:formData.A,onChange:handleChange}));case'Position to Know Argument':return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"P is in a position to know\",name:\"P\",value:formData.P,onChange:handleChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"whether proposition A is true or not\",name:\"A\",value:formData.A,onChange:handleChange}));default:return null;}};const dispatch=useDispatch();const handleSubmit=async e=>{e.preventDefault();const payload={...formData,isAttackedBy:[],isReply:true,chosenCriticalQuestion:selectedQuestion};let action_creator;let endpoint;switch(selectedArgumentType){case'Action Argument':action_creator=createActionSchema;endpoint='https://argupedia.onrender.com/argumentSchemas/action';break;case'Expert Opinion Argument':action_creator=createExpertOpinionSchema;endpoint='https://argupedia.onrender.com/argumentSchemas/expert-opinion';break;case'Position to Know Argument':action_creator=createPositionToKnowSchema;endpoint='https://argupedia.onrender.com/argumentSchemas/position-to-know';break;default:console.error('Invalid argument type');return;}console.log('Payload sent to createArgument action:',payload);try{const created_argument=await dispatch(action_creator(payload,endpoint));if(created_argument&&created_argument._id){if(created_argument.chosenCriticalQuestion===3||created_argument.chosenCriticalQuestion===8){await dispatch(updateIsAttackedBy(created_argument._id,clickedNode));await dispatch(updateIsAttackedBy(clickedNode,created_argument._id));}else{await dispatch(updateIsAttackedBy(clickedNode,created_argument._id));}console.log(\"created argument's chosen critical q id:\",created_argument.chosenCriticalQuestion);}setFormData(getInitialFormData(selectedArgumentType));}catch(error){console.log(\"Error creating \".concat(selectedArgumentType,\" schema:\"),error);}};const handleSelectQuestion=event=>{setSelectedQuestion(event.target.value);};const handleSelectArgumentType=event=>{const selected_type=event.target.value;setSelectedArgumentType(selected_type);setFormData(getInitialFormData(selected_type));};const handleChange=event=>{const{name,value}=event.target;setFormData({...formData,[name]:value});};const getInitialFormData=argumentType=>{switch(argumentType){case'Action Argument':return{R:'',A:'',S:'',G:'',V:''};case'Expert Opinion Argument':return{E:'',D:'',A:''};case'Position to Know Argument':return{P:'',A:''};default:return{};}};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit,style:{maxWidth:'400px'}},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"criticalQuestion\"},\"Select Critical Question:\"),/*#__PURE__*/React.createElement(\"select\",{id:\"criticalQuestion\",value:selectedQuestion,onChange:handleSelectQuestion},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select\"),criticalQuestions.map(question=>/*#__PURE__*/React.createElement(\"option\",{key:question.id,value:question.id},question.text)))),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"argumentType\"},\"Select Argument Type:\"),/*#__PURE__*/React.createElement(\"select\",{id:\"argumentType\",value:selectedArgumentType,onChange:handleSelectArgumentType},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Action Argument\"},\"Action Argument\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Expert Opinion Argument\"},\"Expert Opinion Argument\"),/*#__PURE__*/React.createElement(\"option\",{value:\"Position to Know Argument\"},\"Position to Know Argument\"))),renderFormFields(),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Submit\"));};export default ReplyForm;","map":{"version":3,"names":["React","useState","useEffect","useDispatch","updateIsAttackedBy","createActionSchema","createExpertOpinionSchema","createPositionToKnowSchema","ReplyForm","_ref","onSubmit","onCancel","clickedNode","criticalQuestions","setCriticalQuestions","selectedQuestion","setSelectedQuestion","selectedArgumentType","setSelectedArgumentType","formData","setFormData","R","A","S","G","V","isReply","chosenCriticalQuestion","console","log","fetchCriticalQuestions","response","fetch","ok","Error","argument_schemas","json","argument_schema","find","schema","_id","questions","id","text","concat","E","D","P","error","renderFormFields","createElement","Fragment","type","placeholder","name","value","onChange","handleChange","dispatch","handleSubmit","e","preventDefault","payload","isAttackedBy","action_creator","endpoint","created_argument","getInitialFormData","handleSelectQuestion","event","target","handleSelectArgumentType","selected_type","argumentType","style","maxWidth","htmlFor","map","question","key"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Form/ReplyForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateIsAttackedBy, createActionSchema, createExpertOpinionSchema, createPositionToKnowSchema } from '../../actions/arguments';\n\nconst ReplyForm = ({ onSubmit, onCancel, clickedNode }) => {\n    const [criticalQuestions, setCriticalQuestions] = useState([]);\n    const [selectedQuestion, setSelectedQuestion] = useState('');\n    const [selectedArgumentType, setSelectedArgumentType] = useState('');\n    const [formData, setFormData] = useState({\n        R: '',\n        A: '',\n        S: '',\n        G: '',\n        V: '',\n        isReply: true,\n        chosenCriticalQuestion: selectedQuestion,\n    });\n\n    useEffect(() => {\n        console.log(\"Clicked Node:\", clickedNode);\n\n        const fetchCriticalQuestions = async () => {\n            try {\n                const response = await fetch(`https://argupedia.onrender.com/argumentSchemas`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch argument schemas');\n                }\n                const argument_schemas = await response.json();\n\n                const argument_schema = argument_schemas.find(schema => schema._id === clickedNode);\n                if (!argument_schema) {\n                    throw new Error('Argument schema not found');\n                }\n\n                console.log(\"Argument Schema:\", argument_schema); \n\n                let questions = [];\n\n                if (argument_schema.R && argument_schema.A && argument_schema.S && argument_schema.G && argument_schema.V) {\n                    questions = [\n                        { id: 1, text: `Are the believed circumstances \"${argument_schema.R}\" true?` },\n                        { id: 2, text: `Does the goal \"${argument_schema.G}\" realize the value \"${argument_schema.V}\" stated?` },\n                        { id: 3, text: `Are there alternative ways of promoting the same values \"${argument_schema.V}\"?` },\n                        { id: 4, text: `Is the action \"${argument_schema.A}\" possible?` },\n                    ];\n                } else if (argument_schema.E && argument_schema.D && argument_schema.A) {\n                    questions = [\n                        { id: 5, text: `How credible is \"${argument_schema.E}\" as an expert?` },\n                        { id: 6, text: `Is \"${argument_schema.E}\" an expert in the field that \"${argument_schema.A}\" is in?` },\n                        { id: 7, text: `Is \"${argument_schema.E}\" personally reliable and trustworthy?` },\n                        { id: 8, text: `Is \"${argument_schema.A}\" consistent with what other experts assert?` },\n                    ];\n                } else if (argument_schema.P && argument_schema.A) {\n                    questions = [\n                        { id: 9, text: `Is \"${argument_schema.P}\" really in a position to know whether \"${argument_schema.A}\" is true?` },\n                        { id: 10, text: `Is \"${argument_schema.P}\" an honest, trustworthy and reliable source?` },\n                        { id: 11, text: `Did \"${argument_schema.P}\" really assert that \"${argument_schema.A}\" is true?` },\n                    ];\n                } else {\n                    questions = [\n                        { id: 12, text: 'No critical questions available' }\n                    ];\n                }\n\n                console.log(\"Critical Questions:\", questions); \n                setCriticalQuestions(questions);\n            } catch (error) {\n                    console.log('Error fetching critical questions:', error);\n            }\n        };\n\n        if (clickedNode) {\n            fetchCriticalQuestions();\n        }\n\n    }, [clickedNode, selectedQuestion]);\n\n    const renderFormFields = () => {\n        switch (selectedArgumentType) {\n            case 'Action Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"In the current circumstances R\"\n                            name=\"R\"\n                            value={formData.R}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"we should perform action A\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"resulting in new circumstances S\"\n                            name=\"S\"\n                            value={formData.S}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"realizing goal G\"\n                            name=\"G\"\n                            value={formData.G}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"promoting value V\"\n                            name=\"V\"\n                            value={formData.V}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            case 'Expert Opinion Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"E is an expert\"\n                            name=\"E\"\n                            value={formData.E}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"in subject domain D\"\n                            name=\"D\"\n                            value={formData.D}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"who proposes that A is true\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            case 'Position to Know Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"P is in a position to know\"\n                            name=\"P\"\n                            value={formData.P}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"whether proposition A is true or not\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            default:\n                return null;\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const payload = { ...formData, isAttackedBy: [], isReply: true, chosenCriticalQuestion: selectedQuestion };\n\n        let action_creator;\n        let endpoint;\n\n        switch (selectedArgumentType) {\n            case 'Action Argument':\n                action_creator = createActionSchema;\n                endpoint = 'https://argupedia.onrender.com/argumentSchemas/action';\n                break;\n            case 'Expert Opinion Argument':\n                action_creator = createExpertOpinionSchema;\n                endpoint = 'https://argupedia.onrender.com/argumentSchemas/expert-opinion';\n                break;\n            case 'Position to Know Argument':\n                action_creator = createPositionToKnowSchema;\n                endpoint = 'https://argupedia.onrender.com/argumentSchemas/position-to-know';\n                break;\n            default:\n                console.error('Invalid argument type');\n                return;\n        }\n\n        console.log('Payload sent to createArgument action:', payload);\n\n        try {\n            const created_argument = await dispatch(action_creator(payload, endpoint));\n\n            if (created_argument && created_argument._id) {\n                if (created_argument.chosenCriticalQuestion === 3 || created_argument.chosenCriticalQuestion === 8) {\n                    await dispatch(updateIsAttackedBy(created_argument._id, clickedNode));\n                    await dispatch(updateIsAttackedBy(clickedNode, created_argument._id));\n                } else {\n                    await dispatch(updateIsAttackedBy(clickedNode, created_argument._id));\n                }\n                console.log(\"created argument's chosen critical q id:\", created_argument.chosenCriticalQuestion);\n            }\n\n            setFormData(getInitialFormData(selectedArgumentType));\n        } catch (error) {\n            console.log(`Error creating ${selectedArgumentType} schema:`, error);\n        }\n\n    };\n\n    const handleSelectQuestion = (event) => {\n        setSelectedQuestion(event.target.value);\n    };\n\n    const handleSelectArgumentType = (event) => {\n        const selected_type = event.target.value;\n        setSelectedArgumentType(selected_type);\n        setFormData(getInitialFormData(selected_type));\n    };\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormData({\n            ...formData,\n            [name]: value\n        });\n    };\n\n    const getInitialFormData = (argumentType) => {\n        switch (argumentType) {\n            case 'Action Argument':\n                return {\n                    R: '',\n                    A: '',\n                    S: '',\n                    G: '',\n                    V: ''\n                };\n            case 'Expert Opinion Argument':\n                return {\n                    E: '',\n                    D: '',\n                    A: ''\n                };\n            case 'Position to Know Argument':\n                return {\n                    P: '',\n                    A: ''\n                };\n            default:\n                return {};\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} style={{ maxWidth: '400px' }}>\n\n            <div>\n                <label htmlFor=\"criticalQuestion\">Select Critical Question:</label>\n                <select id=\"criticalQuestion\" value={selectedQuestion} onChange={handleSelectQuestion}>\n                    <option value=\"\">Select</option>\n                    {criticalQuestions.map(question => (\n                        <option key={question.id} value={question.id}>\n                            {question.text}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            <div>\n                <label htmlFor=\"argumentType\">Select Argument Type:</label>\n                <select id=\"argumentType\" value={selectedArgumentType} onChange={handleSelectArgumentType}>\n                    <option value=\"\">Select</option>\n                    <option value=\"Action Argument\">Action Argument</option>\n                    <option value=\"Expert Opinion Argument\">Expert Opinion Argument</option>\n                    <option value=\"Position to Know Argument\">Position to Know Argument</option>\n                </select>\n            </div>\n\n            {renderFormFields()}\n\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default ReplyForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}