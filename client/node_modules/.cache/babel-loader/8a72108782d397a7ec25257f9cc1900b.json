{"ast":null,"code":"var _jsxFileName = \"/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Form/ReplyForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateIsAttackedBy, createActionSchema, createExpertOpinionSchema, createPositionToKnowSchema } from '../../actions/arguments';\nconst ReplyForm = ({\n  onSubmit,\n  onCancel,\n  clickedNode\n}) => {\n  const [criticalQuestions, setCriticalQuestions] = useState([]);\n  const [selectedQuestion, setSelectedQuestion] = useState('');\n  const [selectedArgumentType, setSelectedArgumentType] = useState('');\n  const [formData, setFormData] = useState({\n    R: '',\n    A: '',\n    S: '',\n    G: '',\n    V: '',\n    isReply: true,\n    chosenCriticalQuestion: selectedQuestion\n  });\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    console.log(\"Clicked Node:\", clickedNode);\n    const fetchCriticalQuestions = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/argumentSchemas`, {\n          signal\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argumentSchemas = await response.json();\n        const argumentSchema = argumentSchemas.find(schema => schema._id === clickedNode);\n        if (!argumentSchema) {\n          throw new Error('Argument schema not found');\n        }\n        console.log(\"Argument Schema:\", argumentSchema);\n        let questions = [];\n        if (argumentSchema.R && argumentSchema.A && argumentSchema.S && argumentSchema.G && argumentSchema.V) {\n          questions = [{\n            id: 1,\n            text: `Are the believed circumstances \"${argumentSchema.R}\" true?`\n          }, {\n            id: 2,\n            text: `Does the goal \"${argumentSchema.G}\" realize the value \"${argumentSchema.V}\" stated?`\n          }, {\n            id: 3,\n            text: `Are there alternative ways of promoting the same values \"${argumentSchema.V}\"?`\n          }, {\n            id: 4,\n            text: `Is the action \"${argumentSchema.A}\" possible?`\n          }];\n        } else if (argumentSchema.E && argumentSchema.D && argumentSchema.A) {\n          questions = [{\n            id: 5,\n            text: `How credible is \"${argumentSchema.E}\" as an expert?`\n          }, {\n            id: 6,\n            text: `Is \"${argumentSchema.E}\" an expert in the field that \"${argumentSchema.A}\" is in?`\n          }, {\n            id: 7,\n            text: `Is \"${argumentSchema.E}\" personally reliable and trustworthy?`\n          }, {\n            id: 8,\n            text: `Is \"${argumentSchema.A}\" consistent with what other experts assert?`\n          }];\n        } else if (argumentSchema.P && argumentSchema.A) {\n          questions = [{\n            id: 9,\n            text: `Is \"${argumentSchema.P}\" really in a position to know whether \"${argumentSchema.A}\" is true?`\n          }, {\n            id: 10,\n            text: `Is \"${argumentSchema.P}\" an honest, trustworthy and reliable source?`\n          }, {\n            id: 11,\n            text: `Did \"${argumentSchema.P}\" really assert that \"${argumentSchema.A}\" is true?`\n          }];\n        } else {\n          questions = [{\n            id: 12,\n            text: 'No critical questions available'\n          }];\n        }\n        console.log(\"Critical Questions:\", questions);\n        setCriticalQuestions(questions);\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          console.log('Fetch aborted');\n        } else {\n          console.error('Error fetching critical questions:', error);\n        }\n      }\n    };\n    if (clickedNode) {\n      fetchCriticalQuestions();\n    }\n    return () => {\n      abortController.abort();\n    };\n  }, [clickedNode, selectedQuestion]);\n  const renderFormFields = () => {\n    switch (selectedArgumentType) {\n      case 'Action Argument':\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"In the current circumstances R\",\n          name: \"R\",\n          value: formData.R,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"we should perform action A\",\n          name: \"A\",\n          value: formData.A,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"resulting in new circumstances S\",\n          name: \"S\",\n          value: formData.S,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"realizing goal G\",\n          name: \"G\",\n          value: formData.G,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"promoting value V\",\n          name: \"V\",\n          value: formData.V,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }\n        }));\n      case 'Expert Opinion Argument':\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"E is an expert\",\n          name: \"E\",\n          value: formData.E,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"in subject domain D\",\n          name: \"D\",\n          value: formData.D,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"who proposes that A is true\",\n          name: \"A\",\n          value: formData.A,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }\n        }));\n      case 'Position to Know Argument':\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"P is in a position to know\",\n          name: \"P\",\n          value: formData.P,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"whether proposition A is true or not\",\n          name: \"A\",\n          value: formData.A,\n          onChange: handleChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }\n        }));\n      default:\n        return null;\n    }\n  };\n  const dispatch = useDispatch();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const payload = {\n      ...formData,\n      isAttackedBy: [],\n      isReply: true,\n      chosenCriticalQuestion: selectedQuestion\n    };\n    let actionCreator;\n    let endpoint;\n    switch (selectedArgumentType) {\n      case 'Action Argument':\n        actionCreator = createActionSchema;\n        endpoint = 'http://localhost:8000/argumentSchemas/action';\n        break;\n      case 'Expert Opinion Argument':\n        actionCreator = createExpertOpinionSchema;\n        endpoint = 'http://localhost:8000/argumentSchemas/expert-opinion';\n        break;\n      case 'Position to Know Argument':\n        actionCreator = createPositionToKnowSchema;\n        endpoint = 'http://localhost:8000/argumentSchemas/position-to-know';\n        break;\n      default:\n        console.error('Invalid argument type');\n        return;\n    }\n    console.log('Payload sent to createArgument action:', payload);\n    try {\n      const createdArgument = await dispatch(actionCreator(payload, endpoint));\n      if (createdArgument && createdArgument._id) {\n        if (createdArgument.chosenCriticalQuestion === 3 || createdArgument.chosenCriticalQuestion === 8) {\n          await dispatch(updateIsAttackedBy(createdArgument._id, clickedNode));\n          await dispatch(updateIsAttackedBy(clickedNode, createdArgument._id));\n        } else {\n          await dispatch(updateIsAttackedBy(clickedNode, createdArgument._id));\n        }\n        console.log(\"created argument's chosen critical q id:\", createdArgument.chosenCriticalQuestion);\n      }\n      setFormData(getInitialFormData(selectedArgumentType));\n    } catch (error) {\n      console.log(`Error creating ${selectedArgumentType} schema:`, error);\n    }\n  };\n  const handleSelectQuestion = event => {\n    setSelectedQuestion(event.target.value);\n  };\n  const handleSelectArgumentType = event => {\n    const selectedType = event.target.value;\n    setSelectedArgumentType(selectedType);\n    setFormData(getInitialFormData(selectedType));\n  };\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const getInitialFormData = argumentType => {\n    switch (argumentType) {\n      case 'Action Argument':\n        return {\n          R: '',\n          A: '',\n          S: '',\n          G: '',\n          V: ''\n        };\n      case 'Expert Opinion Argument':\n        return {\n          E: '',\n          D: '',\n          A: ''\n        };\n      case 'Position to Know Argument':\n        return {\n          P: '',\n          A: ''\n        };\n      default:\n        return {};\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      maxWidth: '400px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"criticalQuestion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 17\n    }\n  }, \"Select Critical Question:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"criticalQuestion\",\n    value: selectedQuestion,\n    onChange: handleSelectQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 21\n    }\n  }, \"Select\"), criticalQuestions.map(question => /*#__PURE__*/React.createElement(\"option\", {\n    key: question.id,\n    value: question.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 25\n    }\n  }, question.text)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"argumentType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 17\n    }\n  }, \"Select Argument Type:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"argumentType\",\n    value: selectedArgumentType,\n    onChange: handleSelectArgumentType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 21\n    }\n  }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Action Argument\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }, \"Action Argument\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Expert Opinion Argument\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, \"Expert Opinion Argument\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Position to Know Argument\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 21\n    }\n  }, \"Position to Know Argument\"))), renderFormFields(), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }\n  }, \"Submit\"));\n};\nexport default ReplyForm;","map":{"version":3,"names":["React","useState","useEffect","useDispatch","updateIsAttackedBy","createActionSchema","createExpertOpinionSchema","createPositionToKnowSchema","ReplyForm","onSubmit","onCancel","clickedNode","criticalQuestions","setCriticalQuestions","selectedQuestion","setSelectedQuestion","selectedArgumentType","setSelectedArgumentType","formData","setFormData","R","A","S","G","V","isReply","chosenCriticalQuestion","abortController","AbortController","signal","console","log","fetchCriticalQuestions","response","fetch","ok","Error","argumentSchemas","json","argumentSchema","find","schema","_id","questions","id","text","E","D","P","error","name","abort","renderFormFields","createElement","Fragment","type","placeholder","value","onChange","handleChange","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","dispatch","handleSubmit","e","preventDefault","payload","isAttackedBy","actionCreator","endpoint","createdArgument","getInitialFormData","handleSelectQuestion","event","target","handleSelectArgumentType","selectedType","argumentType","style","maxWidth","htmlFor","map","question","key"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Form/ReplyForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateIsAttackedBy, createActionSchema, createExpertOpinionSchema, createPositionToKnowSchema } from '../../actions/arguments';\n\nconst ReplyForm = ({ onSubmit, onCancel, clickedNode }) => {\n    const [criticalQuestions, setCriticalQuestions] = useState([]);\n    const [selectedQuestion, setSelectedQuestion] = useState('');\n    const [selectedArgumentType, setSelectedArgumentType] = useState('');\n    const [formData, setFormData] = useState({\n        R: '',\n        A: '',\n        S: '',\n        G: '',\n        V: '',\n        isReply: true,\n        chosenCriticalQuestion: selectedQuestion,\n    });\n\n    useEffect(() => {\n        const abortController = new AbortController();\n        const signal = abortController.signal;\n        console.log(\"Clicked Node:\", clickedNode);\n\n        const fetchCriticalQuestions = async () => {\n            try {\n                const response = await fetch(`http://localhost:8000/argumentSchemas`, { signal });\n                if (!response.ok) {\n                    throw new Error('Failed to fetch argument schemas');\n                }\n                const argumentSchemas = await response.json();\n\n                const argumentSchema = argumentSchemas.find(schema => schema._id === clickedNode);\n                if (!argumentSchema) {\n                    throw new Error('Argument schema not found');\n                }\n\n                console.log(\"Argument Schema:\", argumentSchema); \n\n                let questions = [];\n\n                if (argumentSchema.R && argumentSchema.A && argumentSchema.S && argumentSchema.G && argumentSchema.V) {\n                    questions = [\n                        { id: 1, text: `Are the believed circumstances \"${argumentSchema.R}\" true?` },\n                        { id: 2, text: `Does the goal \"${argumentSchema.G}\" realize the value \"${argumentSchema.V}\" stated?` },\n                        { id: 3, text: `Are there alternative ways of promoting the same values \"${argumentSchema.V}\"?` },\n                        { id: 4, text: `Is the action \"${argumentSchema.A}\" possible?` },\n                    ];\n                } else if (argumentSchema.E && argumentSchema.D && argumentSchema.A) {\n                    questions = [\n                        { id: 5, text: `How credible is \"${argumentSchema.E}\" as an expert?` },\n                        { id: 6, text: `Is \"${argumentSchema.E}\" an expert in the field that \"${argumentSchema.A}\" is in?` },\n                        { id: 7, text: `Is \"${argumentSchema.E}\" personally reliable and trustworthy?` },\n                        { id: 8, text: `Is \"${argumentSchema.A}\" consistent with what other experts assert?` },\n                    ];\n                } else if (argumentSchema.P && argumentSchema.A) {\n                    questions = [\n                        { id: 9, text: `Is \"${argumentSchema.P}\" really in a position to know whether \"${argumentSchema.A}\" is true?` },\n                        { id: 10, text: `Is \"${argumentSchema.P}\" an honest, trustworthy and reliable source?` },\n                        { id: 11, text: `Did \"${argumentSchema.P}\" really assert that \"${argumentSchema.A}\" is true?` },\n                    ];\n                } else {\n                    questions = [\n                        { id: 12, text: 'No critical questions available' }\n                    ];\n                }\n\n                console.log(\"Critical Questions:\", questions); \n                setCriticalQuestions(questions);\n            } catch (error) {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch aborted');\n                } else {\n                    console.error('Error fetching critical questions:', error);\n                }\n            }\n        };\n\n        if (clickedNode) {\n            fetchCriticalQuestions();\n        }\n\n        return () => {\n            abortController.abort();\n        };\n\n    }, [clickedNode, selectedQuestion]);\n\n    const renderFormFields = () => {\n        switch (selectedArgumentType) {\n            case 'Action Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"In the current circumstances R\"\n                            name=\"R\"\n                            value={formData.R}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"we should perform action A\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"resulting in new circumstances S\"\n                            name=\"S\"\n                            value={formData.S}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"realizing goal G\"\n                            name=\"G\"\n                            value={formData.G}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"promoting value V\"\n                            name=\"V\"\n                            value={formData.V}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            case 'Expert Opinion Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"E is an expert\"\n                            name=\"E\"\n                            value={formData.E}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"in subject domain D\"\n                            name=\"D\"\n                            value={formData.D}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"who proposes that A is true\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            case 'Position to Know Argument':\n                return (\n                    <>\n                        <input\n                            type=\"text\"\n                            placeholder=\"P is in a position to know\"\n                            name=\"P\"\n                            value={formData.P}\n                            onChange={handleChange}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"whether proposition A is true or not\"\n                            name=\"A\"\n                            value={formData.A}\n                            onChange={handleChange}\n                        />\n                    </>\n                );\n            default:\n                return null;\n        }\n    };\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const payload = { ...formData, isAttackedBy: [], isReply: true, chosenCriticalQuestion: selectedQuestion };\n\n        let actionCreator;\n        let endpoint;\n\n        switch (selectedArgumentType) {\n            case 'Action Argument':\n                actionCreator = createActionSchema;\n                endpoint = 'http://localhost:8000/argumentSchemas/action';\n                break;\n            case 'Expert Opinion Argument':\n                actionCreator = createExpertOpinionSchema;\n                endpoint = 'http://localhost:8000/argumentSchemas/expert-opinion';\n                break;\n            case 'Position to Know Argument':\n                actionCreator = createPositionToKnowSchema;\n                endpoint = 'http://localhost:8000/argumentSchemas/position-to-know';\n                break;\n            default:\n                console.error('Invalid argument type');\n                return;\n        }\n\n        console.log('Payload sent to createArgument action:', payload);\n\n        try {\n            const createdArgument = await dispatch(actionCreator(payload, endpoint));\n\n            if (createdArgument && createdArgument._id) {\n                if (createdArgument.chosenCriticalQuestion === 3 || createdArgument.chosenCriticalQuestion === 8) {\n                    await dispatch(updateIsAttackedBy(createdArgument._id, clickedNode));\n                    await dispatch(updateIsAttackedBy(clickedNode, createdArgument._id));\n                } else {\n                    await dispatch(updateIsAttackedBy(clickedNode, createdArgument._id));\n                }\n                console.log(\"created argument's chosen critical q id:\", createdArgument.chosenCriticalQuestion);\n            }\n\n            setFormData(getInitialFormData(selectedArgumentType));\n        } catch (error) {\n            console.log(`Error creating ${selectedArgumentType} schema:`, error);\n        }\n\n    };\n\n    const handleSelectQuestion = (event) => {\n        setSelectedQuestion(event.target.value);\n    };\n\n    const handleSelectArgumentType = (event) => {\n        const selectedType = event.target.value;\n        setSelectedArgumentType(selectedType);\n        setFormData(getInitialFormData(selectedType));\n    };\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormData({\n            ...formData,\n            [name]: value\n        });\n    };\n\n    const getInitialFormData = (argumentType) => {\n        switch (argumentType) {\n            case 'Action Argument':\n                return {\n                    R: '',\n                    A: '',\n                    S: '',\n                    G: '',\n                    V: ''\n                };\n            case 'Expert Opinion Argument':\n                return {\n                    E: '',\n                    D: '',\n                    A: ''\n                };\n            case 'Position to Know Argument':\n                return {\n                    P: '',\n                    A: ''\n                };\n            default:\n                return {};\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} style={{ maxWidth: '400px' }}>\n\n            <div>\n                <label htmlFor=\"criticalQuestion\">Select Critical Question:</label>\n                <select id=\"criticalQuestion\" value={selectedQuestion} onChange={handleSelectQuestion}>\n                    <option value=\"\">Select</option>\n                    {criticalQuestions.map(question => (\n                        <option key={question.id} value={question.id}>\n                            {question.text}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            <div>\n                <label htmlFor=\"argumentType\">Select Argument Type:</label>\n                <select id=\"argumentType\" value={selectedArgumentType} onChange={handleSelectArgumentType}>\n                    <option value=\"\">Select</option>\n                    <option value=\"Action Argument\">Action Argument</option>\n                    <option value=\"Expert Opinion Argument\">Expert Opinion Argument</option>\n                    <option value=\"Position to Know Argument\">Position to Know Argument</option>\n                </select>\n            </div>\n\n            {renderFormFields()}\n\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default ReplyForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}