{"ast":null,"code":"var _jsxFileName = \"/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Graph/Graph.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nconst Graph = ({\n  startingNodeId,\n  handleNodeClick\n}) => {\n  const svg_ref = useRef(null);\n  const evaluate_button_ref = useRef(null);\n  const cleanup_ref = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argument_schemas = await response.json();\n        const argument_schema = argument_schemas.find(schema => schema._id === startingNodeId);\n        if (!argument_schema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svg_ref.current);\n        svg.selectAll('*').remove();\n        const nodes_group = svg.append('g');\n        const rendered_nodes = new Set();\n        const renderNodes = (node, x, y, nodesGroup) => {\n          if (!node || !node._id || rendered_nodes.has(node._id)) return;\n          const radius = 20;\n          const attacker_spacing = 150;\n          if (!rendered_nodes.has(node._id)) {\n            nodesGroup.append('circle').attr('id', `node-${node._id}`).attr('cx', x).attr('cy', y).attr('r', radius).attr('fill', '#1f77b4').on('click', () => {\n              if (handleNodeClick) {\n                handleNodeClick(node._id);\n              }\n            });\n            rendered_nodes.add(node._id);\n          }\n          if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n            const initial_y_position = y - (node.isAttackedBy.length - 1) * attacker_spacing / 2;\n            node.isAttackedBy.forEach((attackerId, index) => {\n              if (!rendered_nodes.has(attackerId)) {\n                const attacker_node = argument_schema.find(schema => schema._id === attackerId);\n                const attacker_y_position = initial_y_position + index * attacker_spacing;\n                const arrow_start_x_position = x;\n                const arrow_start_y_position = y;\n                const arrow_end_x_position = x + (attacker_spacing - radius);\n                const arrow_end_y_position = attacker_y_position;\n                const lineLength = Math.sqrt((arrow_end_x_position - arrow_start_x_position) ** 2 + (arrow_end_y_position - arrow_start_y_position) ** 2);\n                const arrowheadX = arrow_start_x_position + radius / lineLength * (arrow_end_x_position - arrow_start_x_position);\n                const arrowheadY = arrow_start_y_position + radius / lineLength * (arrow_end_y_position - arrow_start_y_position);\n                const angle = Math.atan2(arrow_end_y_position - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n                nodesGroup.append('line').attr('x1', arrowheadX).attr('y1', arrowheadY).attr('x2', arrow_end_x_position).attr('y2', arrow_end_y_position).attr('stroke', '#000000').attr('stroke-width', 2);\n                nodesGroup.append('path').attr('d', d3.symbol().type(d3.symbolTriangle).size(80)).attr('transform', `translate(${arrowheadX},${arrowheadY}) rotate(${angle * (180 / Math.PI) - 90})`).attr('fill', '#000000');\n                const criticalQuestionId = attacker_node.chosenCriticalQuestion;\n                if (criticalQuestionId === 3 || criticalQuestionId === 8) {\n                  const midX = (arrow_start_x_position + arrow_end_x_position) / 2;\n                  const midY = (arrow_start_y_position + arrow_end_y_position) / 2;\n                  const secondArrowheadAngle = Math.atan2(arrowEndY - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n                  const secondArrowheadDistance = 30;\n                  const secondArrowheadX = midX + secondArrowheadDistance * Math.cos(secondArrowheadAngle);\n                  const secondArrowheadY = midY + secondArrowheadDistance * Math.sin(secondArrowheadAngle);\n                  nodesGroup.append('path').attr('d', d3.symbol().type(d3.symbolTriangle).size(80)).attr('transform', `translate(${secondArrowheadX},${secondArrowheadY}) rotate(${secondArrowheadAngle * (180 / Math.PI) + 90})`).attr('fill', '#000000');\n                }\n                renderNodes(attacker_node, arrow_end_x_position, arrowEndY, nodesGroup);\n              }\n            });\n          }\n        };\n        const handleEvaluateGraphClick = async () => {\n          const evaluated_nodes = new Set();\n          const winning_nodes = new Set();\n          const losing_nodes = new Set();\n          const undecided_nodes = new Set();\n          const unevaluated_nodes = new Set(rendered_nodes);\n          const evaluateNode = nodeId => {\n            if (evaluated_nodes.has(nodeId)) {\n              if (winning_nodes.has(nodeId)) return 'winning';\n              if (losing_nodes.has(nodeId)) return 'losing';\n              return 'undecided';\n            }\n            evaluated_nodes.add(nodeId);\n            unevaluated_nodes.delete(nodeId);\n            const node = argument_schema.find(schema => schema._id === nodeId);\n            if (!node) {\n              console.error('Node not found:', nodeId);\n              return 'unevaluated';\n            }\n            if (node.isAttackedBy.length === 0) {\n              winning_nodes.add(nodeId);\n              return 'winning';\n            } else {\n              let attackerStatuses = node.isAttackedBy.map(attackerId => evaluateNode(attackerId));\n              if (attackerStatuses.every(status => status === 'losing')) {\n                winning_nodes.add(nodeId);\n                return 'winning';\n              } else if (attackerStatuses.some(status => status === 'winning')) {\n                losing_nodes.add(nodeId);\n                return 'losing';\n              } else {\n                undecided_nodes.add(nodeId);\n                return 'undecided';\n              }\n            }\n          };\n          evaluateNode(argument_schema._id);\n          winning_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'green'));\n          losing_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'red'));\n          undecided_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'grey'));\n          unevaluated_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'lightgrey')); // Color these nodes differently if needed\n\n          console.log(\"Winning nodes:\", [...winning_nodes]);\n          console.log(\"Losing nodes:\", [...losing_nodes]);\n          console.log(\"Undecided nodes:\", [...undecided_nodes]);\n          console.log(\"Unevaluated nodes:\", [...unevaluated_nodes]);\n          console.log(\"Rendered nodes:\", [...rendered_nodes]);\n        };\n        if (evaluate_button_ref.current) {\n          evaluate_button_ref.current.addEventListener('click', handleEvaluateGraphClick);\n        }\n        cleanup_ref.current = () => {\n          if (evaluate_button_ref.current) {\n            evaluate_button_ref.current.removeEventListener('click', handleEvaluateGraphClick);\n          }\n        };\n        renderNodes(argument_schema, window.innerWidth / 3, window.innerHeight / 2, nodes_group);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n    fetchData();\n    return () => {\n      if (cleanup_ref.current) {\n        cleanup_ref.current();\n      }\n    };\n  }, [startingNodeId, handleNodeClick]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: window.innerWidth * 0.95,\n      height: window.innerHeight\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svg_ref,\n    width: \"100%\",\n    height: \"100%\",\n    style: {\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    ref: evaluate_button_ref,\n    style: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      padding: '10px',\n      margin: '10px',\n      zIndex: 1000\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, \"Evaluate Graph\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '50px',\n      right: '10px',\n      zIndex: 1000\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'green',\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, \"Winning\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'red',\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, \"Losing\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'grey'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, \"Undecided\")));\n};\nexport default Graph;","map":{"version":3,"names":["React","useEffect","useRef","d3","Graph","startingNodeId","handleNodeClick","svg_ref","evaluate_button_ref","cleanup_ref","fetchData","response","fetch","ok","Error","argument_schemas","json","argument_schema","find","schema","_id","svg","select","current","selectAll","remove","nodes_group","append","rendered_nodes","Set","renderNodes","node","x","y","nodesGroup","has","radius","attacker_spacing","attr","on","add","isAttackedBy","length","initial_y_position","forEach","attackerId","index","attacker_node","attacker_y_position","arrow_start_x_position","arrow_start_y_position","arrow_end_x_position","arrow_end_y_position","lineLength","Math","sqrt","arrowheadX","arrowheadY","angle","atan2","symbol","type","symbolTriangle","size","PI","criticalQuestionId","chosenCriticalQuestion","midX","midY","secondArrowheadAngle","arrowEndY","secondArrowheadDistance","secondArrowheadX","cos","secondArrowheadY","sin","handleEvaluateGraphClick","evaluated_nodes","winning_nodes","losing_nodes","undecided_nodes","unevaluated_nodes","evaluateNode","nodeId","delete","console","error","attackerStatuses","map","every","status","some","style","log","addEventListener","removeEventListener","window","innerWidth","innerHeight","createElement","position","width","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","top","right","padding","margin","zIndex","color","marginRight"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Graph/Graph.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst Graph = ({ startingNodeId, handleNodeClick }) => {\n  const svg_ref = useRef(null);\n  const evaluate_button_ref = useRef(null);\n  const cleanup_ref = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argument_schemas = await response.json();\n        const argument_schema = argument_schemas.find(schema => schema._id === startingNodeId);\n        if (!argument_schema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svg_ref.current);\n        svg.selectAll('*').remove();\n        const nodes_group = svg.append('g');\n\n        const rendered_nodes = new Set();\n\n        const renderNodes = (node, x, y, nodesGroup) => {\n          if (!node || !node._id || rendered_nodes.has(node._id)) return;\n\n          const radius = 20;\n          const attacker_spacing = 150;\n\n          if (!rendered_nodes.has(node._id)) {\n\n            nodesGroup.append('circle')\n              .attr('id', `node-${node._id}`)\n              .attr('cx', x)\n              .attr('cy', y)\n              .attr('r', radius)\n              .attr('fill', '#1f77b4')\n              .on('click', () => {\n                if (handleNodeClick) {\n                  handleNodeClick(node._id);\n                }\n              });\n\n            rendered_nodes.add(node._id);\n          }\n\n          if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n            const initial_y_position = y - (node.isAttackedBy.length - 1) * attacker_spacing / 2;\n\n            node.isAttackedBy.forEach((attackerId, index) => {\n\n              if (!rendered_nodes.has(attackerId)) {\n                const attacker_node = argument_schema.find(schema => schema._id === attackerId);\n\n                const attacker_y_position = initial_y_position + index * attacker_spacing;\n\n                const arrow_start_x_position = x;\n                const arrow_start_y_position = y;\n                const arrow_end_x_position = x + (attacker_spacing - radius);\n                const arrow_end_y_position = attacker_y_position;\n\n                const lineLength = Math.sqrt((arrow_end_x_position - arrow_start_x_position) ** 2 + (arrow_end_y_position - arrow_start_y_position) ** 2);\n\n                const arrowheadX = arrow_start_x_position + (radius / lineLength) * (arrow_end_x_position - arrow_start_x_position);\n                const arrowheadY = arrow_start_y_position + (radius / lineLength) * (arrow_end_y_position - arrow_start_y_position);\n\n                const angle = Math.atan2(arrow_end_y_position - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n\n                nodesGroup.append('line')\n                  .attr('x1', arrowheadX)\n                  .attr('y1', arrowheadY)\n                  .attr('x2', arrow_end_x_position)\n                  .attr('y2', arrow_end_y_position)\n                  .attr('stroke', '#000000')\n                  .attr('stroke-width', 2);\n\n                nodesGroup.append('path')\n                  .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                  .attr('transform', `translate(${arrowheadX},${arrowheadY}) rotate(${angle * (180 / Math.PI) - 90})`)\n                  .attr('fill', '#000000');\n\n                const criticalQuestionId = attacker_node.chosenCriticalQuestion;\n\n                if (criticalQuestionId === 3 || criticalQuestionId === 8) {\n\n                  const midX = (arrow_start_x_position + arrow_end_x_position) / 2;\n                  const midY = (arrow_start_y_position + arrow_end_y_position) / 2;\n\n                  const secondArrowheadAngle = Math.atan2(arrowEndY - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n\n                  const secondArrowheadDistance = 30;\n                  const secondArrowheadX = midX + secondArrowheadDistance * Math.cos(secondArrowheadAngle);\n                  const secondArrowheadY = midY + secondArrowheadDistance * Math.sin(secondArrowheadAngle);\n\n                  nodesGroup.append('path')\n                    .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                    .attr('transform', `translate(${secondArrowheadX},${secondArrowheadY}) rotate(${secondArrowheadAngle * (180 / Math.PI) + 90})`)\n                    .attr('fill', '#000000');\n                }\n\n                renderNodes(attacker_node, arrow_end_x_position, arrowEndY, nodesGroup);\n              }\n            });\n          }\n        };\n\n        const handleEvaluateGraphClick = async () => {\n          const evaluated_nodes = new Set(); \n          const winning_nodes = new Set();\n          const losing_nodes = new Set();\n          const undecided_nodes = new Set(); \n          const unevaluated_nodes = new Set(rendered_nodes); \n\n          const evaluateNode = (nodeId) => {\n            if (evaluated_nodes.has(nodeId)) {\n              if (winning_nodes.has(nodeId)) return 'winning';\n              if (losing_nodes.has(nodeId)) return 'losing';\n              return 'undecided'; \n            }\n        \n            evaluated_nodes.add(nodeId); \n            unevaluated_nodes.delete(nodeId); \n        \n            const node = argument_schema.find(schema => schema._id === nodeId);\n            if (!node) {\n              console.error('Node not found:', nodeId);\n              return 'unevaluated';\n            }\n        \n            if (node.isAttackedBy.length === 0) {\n              winning_nodes.add(nodeId);\n              return 'winning';\n            } else {\n              let attackerStatuses = node.isAttackedBy.map(attackerId => evaluateNode(attackerId));\n              \n              if (attackerStatuses.every(status => status === 'losing')) {\n                winning_nodes.add(nodeId);\n                return 'winning';\n              } else if (attackerStatuses.some(status => status === 'winning')) {\n                losing_nodes.add(nodeId);\n                return 'losing';\n              } else {\n                undecided_nodes.add(nodeId);\n                return 'undecided';\n              }\n            }\n          };\n        \n          evaluateNode(argument_schema._id);\n        \n          winning_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'green'));\n          losing_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'red'));\n          undecided_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'grey'));\n          unevaluated_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'lightgrey')); // Color these nodes differently if needed\n        \n          console.log(\"Winning nodes:\", [...winning_nodes]);\n          console.log(\"Losing nodes:\", [...losing_nodes]);\n          console.log(\"Undecided nodes:\", [...undecided_nodes]);\n          console.log(\"Unevaluated nodes:\", [...unevaluated_nodes]);\n          console.log(\"Rendered nodes:\", [...rendered_nodes]);\n        };\n        \n\n        if (evaluate_button_ref.current) {\n          evaluate_button_ref.current.addEventListener('click', handleEvaluateGraphClick);\n        }\n\n        cleanup_ref.current = () => {\n          if (evaluate_button_ref.current) {\n            evaluate_button_ref.current.removeEventListener('click', handleEvaluateGraphClick);\n          }\n        };\n\n        renderNodes(argument_schema, window.innerWidth / 3, window.innerHeight / 2, nodes_group);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (cleanup_ref.current) {\n        cleanup_ref.current();\n      }\n    };\n  }, [startingNodeId, handleNodeClick]);\n\n  return (\n    <div style={{ position: 'relative', width: window.innerWidth * 0.95, height: window.innerHeight }}>\n      <svg ref={svg_ref} width=\"100%\" height=\"100%\" style={{ border: '1px solid #ccc' }} />\n      <button\n        ref={evaluate_button_ref}\n        style={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          padding: '10px',\n          margin: '10px',\n          zIndex: 1000\n        }}\n      >\n        Evaluate Graph\n      </button>\n      <div style={{ position: 'absolute', top: '50px', right: '10px', zIndex: 1000 }}>\n        <span style={{ color: 'green', marginRight: '10px' }}>Winning</span>\n        <span style={{ color: 'red', marginRight: '10px' }}>Losing</span>\n        <span style={{ color: 'grey' }}>Undecided</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;"],"mappings":"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"},"metadata":{},"sourceType":"module"}