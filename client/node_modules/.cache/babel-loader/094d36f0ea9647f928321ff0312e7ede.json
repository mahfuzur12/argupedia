{"ast":null,"code":"var _jsxFileName = \"/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Graph/Graph.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nconst Graph = ({\n  startingNodeId,\n  handleNodeClick\n}) => {\n  const svgRef = useRef(null);\n  const evaluateButtonRef = useRef(null);\n  const cleanupRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argumentSchemas = await response.json();\n        const argumentSchema = argumentSchemas.find(schema => schema._id === startingNodeId);\n        if (!argumentSchema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svgRef.current);\n        svg.selectAll('*').remove();\n        const nodesGroup = svg.append('g');\n        const handleEvaluateGraphClick = async startingNodeId => {\n          try {\n            const response = await fetch(`http://localhost:8000/argumentSchemas`);\n            if (!response.ok) {\n              throw new Error('Failed to fetch argument schemas');\n            }\n            const argumentSchemas = await response.json();\n            const argumentSchema = argumentSchemas.find(schema => schema._id === startingNodeId);\n            if (!argumentSchema) {\n              throw new Error('Argument schema not found');\n            }\n            const rendered_nodes = new Set();\n            const renderNodes = node => {\n              if (!node || !node._id || rendered_nodes.has(node._id)) return;\n              if (!rendered_nodes.has(node._id)) {\n                rendered_nodes.add(node._id);\n              }\n              if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n                node.isAttackedBy.forEach(attackerId => {\n                  if (!rendered_nodes.has(attackerId)) {\n                    const attackerNode = argumentSchemas.find(schema => schema._id === attackerId);\n                    renderNodes(attackerNode);\n                  }\n                });\n              }\n            };\n            renderNodes(argumentSchema);\n            console.log('Evaluate Graph button has been clicked');\n            console.log('Rendered nodes:', rendered_nodes);\n          } catch (error) {\n            console.error('Error fetching argument schemas:', error);\n          }\n        };\n        if (evaluateButtonRef.current) {\n          evaluateButtonRef.current.addEventListener('click', handleEvaluateGraphClick(startingNodeId));\n        }\n        cleanupRef.current = () => {\n          if (evaluateButtonRef.current) {\n            evaluateButtonRef.current.removeEventListener('click', handleEvaluateGraphClick(startingNodeId));\n          }\n        };\n        const renderedNodes = new Set();\n        const renderNodes = (node, x, y, nodesGroup) => {\n          if (!node || !node._id || renderedNodes.has(node._id)) return;\n          const radius = 20;\n          const attackerSpacing = 150;\n          if (!renderedNodes.has(node._id)) {\n            nodesGroup.append('circle').attr('cx', x).attr('cy', y).attr('r', radius).attr('fill', '#1f77b4').on('click', () => {\n              if (handleNodeClick) {\n                handleNodeClick(node._id);\n              }\n            });\n            renderedNodes.add(node._id);\n          }\n          if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n            const initialY = y - (node.isAttackedBy.length - 1) * attackerSpacing / 2;\n            node.isAttackedBy.forEach((attackerId, index) => {\n              if (!renderedNodes.has(attackerId)) {\n                const attackerNode = argumentSchemas.find(schema => schema._id === attackerId);\n                const attackerY = initialY + index * attackerSpacing;\n                const arrowStartX = x;\n                const arrowStartY = y;\n                const arrowEndX = x + (attackerSpacing - radius);\n                const arrowEndY = attackerY;\n                const lineLength = Math.sqrt((arrowEndX - arrowStartX) ** 2 + (arrowEndY - arrowStartY) ** 2);\n                const arrowheadX = arrowStartX + radius / lineLength * (arrowEndX - arrowStartX);\n                const arrowheadY = arrowStartY + radius / lineLength * (arrowEndY - arrowStartY);\n                const angle = Math.atan2(arrowEndY - arrowStartY, arrowEndX - arrowStartX);\n                nodesGroup.append('line').attr('x1', arrowheadX).attr('y1', arrowheadY).attr('x2', arrowEndX).attr('y2', arrowEndY).attr('stroke', '#000000').attr('stroke-width', 2);\n                nodesGroup.append('path').attr('d', d3.symbol().type(d3.symbolTriangle).size(80)).attr('transform', `translate(${arrowheadX},${arrowheadY}) rotate(${angle * (180 / Math.PI) - 90})`).attr('fill', '#000000');\n                const criticalQuestionId = attackerNode.chosenCriticalQuestion;\n                if (criticalQuestionId === 3 || criticalQuestionId === 8) {\n                  const midX = (arrowStartX + arrowEndX) / 2;\n                  const midY = (arrowStartY + arrowEndY) / 2;\n                  const secondArrowheadAngle = Math.atan2(arrowEndY - arrowStartY, arrowEndX - arrowStartX);\n                  const secondArrowheadDistance = 30;\n                  const secondArrowheadX = midX + secondArrowheadDistance * Math.cos(secondArrowheadAngle);\n                  const secondArrowheadY = midY + secondArrowheadDistance * Math.sin(secondArrowheadAngle);\n                  nodesGroup.append('path').attr('d', d3.symbol().type(d3.symbolTriangle).size(80)).attr('transform', `translate(${secondArrowheadX},${secondArrowheadY}) rotate(${secondArrowheadAngle * (180 / Math.PI) + 90})`).attr('fill', '#000000');\n                }\n                renderNodes(attackerNode, arrowEndX, arrowEndY, nodesGroup);\n              }\n            });\n          }\n        };\n        renderNodes(argumentSchema, window.innerWidth / 3, window.innerHeight / 2, nodesGroup);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n    fetchData();\n    return () => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n      }\n    };\n  }, [startingNodeId, handleNodeClick]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: window.innerWidth * 0.95,\n      height: window.innerHeight * 0.9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    width: \"100%\",\n    height: \"100%\",\n    style: {\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    ref: evaluateButtonRef,\n    style: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      padding: '10px',\n      margin: '10px',\n      zIndex: 1000 // Ensure the button is above all other elements\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, \"Evaluate Graph\"));\n};\nexport default Graph;","map":{"version":3,"names":["React","useEffect","useRef","d3","Graph","startingNodeId","handleNodeClick","svgRef","evaluateButtonRef","cleanupRef","fetchData","response","fetch","ok","Error","argumentSchemas","json","argumentSchema","find","schema","_id","svg","select","current","selectAll","remove","nodesGroup","append","handleEvaluateGraphClick","rendered_nodes","Set","renderNodes","node","has","add","isAttackedBy","length","forEach","attackerId","attackerNode","console","log","error","addEventListener","removeEventListener","renderedNodes","x","y","radius","attackerSpacing","attr","on","initialY","index","attackerY","arrowStartX","arrowStartY","arrowEndX","arrowEndY","lineLength","Math","sqrt","arrowheadX","arrowheadY","angle","atan2","symbol","type","symbolTriangle","size","PI","criticalQuestionId","chosenCriticalQuestion","midX","midY","secondArrowheadAngle","secondArrowheadDistance","secondArrowheadX","cos","secondArrowheadY","sin","window","innerWidth","innerHeight","createElement","style","position","width","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","top","right","padding","margin","zIndex"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Graph/Graph.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst Graph = ({ startingNodeId, handleNodeClick }) => {\n  const svgRef = useRef(null);\n  const evaluateButtonRef = useRef(null);\n  const cleanupRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argumentSchemas = await response.json();\n        const argumentSchema = argumentSchemas.find(schema => schema._id === startingNodeId);\n        if (!argumentSchema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svgRef.current);\n        svg.selectAll('*').remove();\n        const nodesGroup = svg.append('g');\n\n        const handleEvaluateGraphClick = async (startingNodeId) => {\n          try {\n            const response = await fetch(`http://localhost:8000/argumentSchemas`);\n              if (!response.ok) {\n                throw new Error('Failed to fetch argument schemas');\n              }\n              const argumentSchemas = await response.json();\n              const argumentSchema = argumentSchemas.find(schema => schema._id === startingNodeId);\n              if (!argumentSchema) {\n                throw new Error('Argument schema not found');\n              }\n      \n            const rendered_nodes = new Set()\n      \n            const renderNodes = (node) => {\n              if (!node || !node._id || rendered_nodes.has(node._id)) return;\n        \n              if (!rendered_nodes.has(node._id)) {\n                rendered_nodes.add(node._id);\n              }\n        \n              if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n        \n                node.isAttackedBy.forEach((attackerId) => {\n        \n                  if (!rendered_nodes.has(attackerId)) {\n                    const attackerNode = argumentSchemas.find(schema => schema._id === attackerId);\n                    renderNodes(attackerNode);\n                  }\n                });\n              }\n            };\n            \n            renderNodes(argumentSchema)\n            console.log('Evaluate Graph button has been clicked');\n            console.log('Rendered nodes:', rendered_nodes);\n      \n          } catch (error) {\n            console.error('Error fetching argument schemas:', error);\n          }\n        };\n\n        if (evaluateButtonRef.current) {\n          evaluateButtonRef.current.addEventListener('click', handleEvaluateGraphClick(startingNodeId));\n        }\n\n        cleanupRef.current = () => {\n          if (evaluateButtonRef.current) {\n            evaluateButtonRef.current.removeEventListener('click', handleEvaluateGraphClick(startingNodeId));\n          }\n        };\n\n        const renderedNodes = new Set();\n\n        const renderNodes = (node, x, y, nodesGroup) => {\n          if (!node || !node._id || renderedNodes.has(node._id)) return;\n\n          const radius = 20;\n          const attackerSpacing = 150;\n\n          if (!renderedNodes.has(node._id)) {\n\n            nodesGroup.append('circle')\n              .attr('cx', x)\n              .attr('cy', y)\n              .attr('r', radius)\n              .attr('fill', '#1f77b4')\n              .on('click', () => {\n                if (handleNodeClick) {\n                  handleNodeClick(node._id);\n                }\n              });\n\n            renderedNodes.add(node._id);\n          }\n\n          if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n            const initialY = y - (node.isAttackedBy.length - 1) * attackerSpacing / 2;\n\n            node.isAttackedBy.forEach((attackerId, index) => {\n\n              if (!renderedNodes.has(attackerId)) {\n                const attackerNode = argumentSchemas.find(schema => schema._id === attackerId);\n\n                const attackerY = initialY + index * attackerSpacing;\n\n                const arrowStartX = x;\n                const arrowStartY = y;\n                const arrowEndX = x + (attackerSpacing - radius);\n                const arrowEndY = attackerY;\n\n                const lineLength = Math.sqrt((arrowEndX - arrowStartX) ** 2 + (arrowEndY - arrowStartY) ** 2);\n\n                const arrowheadX = arrowStartX + (radius / lineLength) * (arrowEndX - arrowStartX);\n                const arrowheadY = arrowStartY + (radius / lineLength) * (arrowEndY - arrowStartY);\n\n                const angle = Math.atan2(arrowEndY - arrowStartY, arrowEndX - arrowStartX);\n\n                nodesGroup.append('line')\n                  .attr('x1', arrowheadX)\n                  .attr('y1', arrowheadY)\n                  .attr('x2', arrowEndX)\n                  .attr('y2', arrowEndY)\n                  .attr('stroke', '#000000')\n                  .attr('stroke-width', 2);\n\n                nodesGroup.append('path')\n                  .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                  .attr('transform', `translate(${arrowheadX},${arrowheadY}) rotate(${angle * (180 / Math.PI) - 90})`)\n                  .attr('fill', '#000000');\n\n                const criticalQuestionId = attackerNode.chosenCriticalQuestion;\n\n                if (criticalQuestionId === 3 || criticalQuestionId === 8) {\n\n                  const midX = (arrowStartX + arrowEndX) / 2;\n                  const midY = (arrowStartY + arrowEndY) / 2;\n\n                  const secondArrowheadAngle = Math.atan2(arrowEndY - arrowStartY, arrowEndX - arrowStartX);\n\n                  const secondArrowheadDistance = 30;\n                  const secondArrowheadX = midX + secondArrowheadDistance * Math.cos(secondArrowheadAngle);\n                  const secondArrowheadY = midY + secondArrowheadDistance * Math.sin(secondArrowheadAngle);\n\n                  nodesGroup.append('path')\n                    .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                    .attr('transform', `translate(${secondArrowheadX},${secondArrowheadY}) rotate(${secondArrowheadAngle * (180 / Math.PI) + 90})`)\n                    .attr('fill', '#000000');\n                }\n\n                renderNodes(attackerNode, arrowEndX, arrowEndY, nodesGroup);\n              }\n            });\n          }\n        };\n\n        renderNodes(argumentSchema, window.innerWidth / 3, window.innerHeight / 2, nodesGroup);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n      }\n    };\n  }, [startingNodeId, handleNodeClick]);\n\n  return (\n    <div style={{ position: 'relative', width: window.innerWidth * 0.95, height: window.innerHeight * 0.9 }}>\n      <svg ref={svgRef} width=\"100%\" height=\"100%\" style={{ border: '1px solid #ccc' }} />\n      <button\n        ref={evaluateButtonRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          padding: '10px',\n          margin: '10px',\n          zIndex: 1000 // Ensure the button is above all other elements\n        }}\n      >\n        Evaluate Graph\n      </button>\n    </div>\n  );\n};\n\nexport default Graph;"],"mappings":"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"},"metadata":{},"sourceType":"module"}