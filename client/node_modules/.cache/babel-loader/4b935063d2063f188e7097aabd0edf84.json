{"ast":null,"code":"import*as api from'../api';export const FETCH_ALL='FETCH_ALL';export const CREATE_ACTION_SCHEMA='CREATE_ACTION_SCHEMA';export const CREATE_EXPERT_OPINION_SCHEMA='CREATE_EXPERT_OPINION_SCHEMA';export const CREATE_POSITION_TO_KNOW_SCHEMA='CREATE_POSITION_TO_KNOW_SCHEMA';export const UPDATE_IS_ATTACKED_BY='UPDATE_IS_ATTACKED_BY';export const updateIsAttackedBy=(id,attackerId)=>async dispatch=>{try{await api.updateIsAttackedBy(id,attackerId);dispatch({type:'UPDATE_IS_ATTACKED_BY',payload:{id,attackerId}});}catch(error){console.log(error.message);}};export const getArgumentSchemas=()=>async dispatch=>{try{const{data}=await api.fetchArgumentSchemas();dispatch({type:FETCH_ALL,payload:data});}catch(error){console.log(error.message);}};export const createActionSchema=actionSchema=>async dispatch=>{try{const{data}=await api.createActionSchema(actionSchema);dispatch({type:CREATE_ACTION_SCHEMA,payload:data});return data;}catch(error){console.log(error.message);}};export const createExpertOpinionSchema=expertOpinionSchema=>async dispatch=>{try{const{data}=await api.createExpertOpinionSchema(expertOpinionSchema);dispatch({type:CREATE_EXPERT_OPINION_SCHEMA,payload:data});return data;}catch(error){console.log(error.message);}};export const createPositionToKnowSchema=positionToKnowSchema=>async dispatch=>{try{const{data}=await api.createPositionToKnowSchema(positionToKnowSchema);dispatch({type:CREATE_POSITION_TO_KNOW_SCHEMA,payload:data});return data;}catch(error){console.log(error.message);}};","map":{"version":3,"names":["api","FETCH_ALL","CREATE_ACTION_SCHEMA","CREATE_EXPERT_OPINION_SCHEMA","CREATE_POSITION_TO_KNOW_SCHEMA","UPDATE_IS_ATTACKED_BY","updateIsAttackedBy","id","attackerId","dispatch","type","payload","error","console","log","message","getArgumentSchemas","data","fetchArgumentSchemas","createActionSchema","actionSchema","createExpertOpinionSchema","expertOpinionSchema","createPositionToKnowSchema","positionToKnowSchema"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/actions/arguments.js"],"sourcesContent":["import * as api from '../api';\n\nexport const FETCH_ALL = 'FETCH_ALL';\nexport const CREATE_ACTION_SCHEMA = 'CREATE_ACTION_SCHEMA';\nexport const CREATE_EXPERT_OPINION_SCHEMA = 'CREATE_EXPERT_OPINION_SCHEMA';\nexport const CREATE_POSITION_TO_KNOW_SCHEMA = 'CREATE_POSITION_TO_KNOW_SCHEMA';\nexport const UPDATE_IS_ATTACKED_BY = 'UPDATE_IS_ATTACKED_BY';\n\nexport const updateIsAttackedBy = (id, attackerId) => async (dispatch) => {\n    try {\n        await api.updateIsAttackedBy(id, attackerId);\n        dispatch({ type: 'UPDATE_IS_ATTACKED_BY', payload: { id, attackerId }});\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const getArgumentSchemas = () => async (dispatch) => {\n    try {\n        const { data } = await api.fetchArgumentSchemas();\n        dispatch({ type: FETCH_ALL, payload: data });\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const createActionSchema = (actionSchema) => async (dispatch) => {\n    try {\n        const { data } = await api.createActionSchema(actionSchema);\n        dispatch({ type: CREATE_ACTION_SCHEMA, payload: data });\n        return data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const createExpertOpinionSchema = (expertOpinionSchema) => async (dispatch) => {\n    try {\n        const { data } = await api.createExpertOpinionSchema(expertOpinionSchema);\n        dispatch({ type: CREATE_EXPERT_OPINION_SCHEMA, payload: data });\n        return data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const createPositionToKnowSchema = (positionToKnowSchema) => async (dispatch) => {\n    try {\n        const { data } = await api.createPositionToKnowSchema(positionToKnowSchema);\n        dispatch({ type: CREATE_POSITION_TO_KNOW_SCHEMA, payload: data });\n        return data;\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,GAAG,KAAM,QAAQ,CAE7B,MAAO,MAAM,CAAAC,SAAS,CAAG,WAAW,CACpC,MAAO,MAAM,CAAAC,oBAAoB,CAAG,sBAAsB,CAC1D,MAAO,MAAM,CAAAC,4BAA4B,CAAG,8BAA8B,CAC1E,MAAO,MAAM,CAAAC,8BAA8B,CAAG,gCAAgC,CAC9E,MAAO,MAAM,CAAAC,qBAAqB,CAAG,uBAAuB,CAE5D,MAAO,MAAM,CAAAC,kBAAkB,CAAGA,CAACC,EAAE,CAAEC,UAAU,GAAK,KAAO,CAAAC,QAAQ,EAAK,CACtE,GAAI,CACA,KAAM,CAAAT,GAAG,CAACM,kBAAkB,CAACC,EAAE,CAAEC,UAAU,CAAC,CAC5CC,QAAQ,CAAC,CAAEC,IAAI,CAAE,uBAAuB,CAAEC,OAAO,CAAE,CAAEJ,EAAE,CAAEC,UAAW,CAAC,CAAC,CAAC,CAC3E,CAAE,MAAOI,KAAK,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC,CAC9B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,KAAO,CAAAP,QAAQ,EAAK,CACxD,GAAI,CACA,KAAM,CAAEQ,IAAK,CAAC,CAAG,KAAM,CAAAjB,GAAG,CAACkB,oBAAoB,CAAC,CAAC,CACjDT,QAAQ,CAAC,CAAEC,IAAI,CAAET,SAAS,CAAEU,OAAO,CAAEM,IAAK,CAAC,CAAC,CAChD,CAAE,MAAOL,KAAK,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC,CAC9B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAI,kBAAkB,CAAIC,YAAY,EAAK,KAAO,CAAAX,QAAQ,EAAK,CACpE,GAAI,CACA,KAAM,CAAEQ,IAAK,CAAC,CAAG,KAAM,CAAAjB,GAAG,CAACmB,kBAAkB,CAACC,YAAY,CAAC,CAC3DX,QAAQ,CAAC,CAAEC,IAAI,CAAER,oBAAoB,CAAES,OAAO,CAAEM,IAAK,CAAC,CAAC,CACvD,MAAO,CAAAA,IAAI,CACf,CAAE,MAAOL,KAAK,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC,CAC9B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAM,yBAAyB,CAAIC,mBAAmB,EAAK,KAAO,CAAAb,QAAQ,EAAK,CAClF,GAAI,CACA,KAAM,CAAEQ,IAAK,CAAC,CAAG,KAAM,CAAAjB,GAAG,CAACqB,yBAAyB,CAACC,mBAAmB,CAAC,CACzEb,QAAQ,CAAC,CAAEC,IAAI,CAAEP,4BAA4B,CAAEQ,OAAO,CAAEM,IAAK,CAAC,CAAC,CAC/D,MAAO,CAAAA,IAAI,CACf,CAAE,MAAOL,KAAK,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC,CAC9B,CACJ,CAAC,CAED,MAAO,MAAM,CAAAQ,0BAA0B,CAAIC,oBAAoB,EAAK,KAAO,CAAAf,QAAQ,EAAK,CACpF,GAAI,CACA,KAAM,CAAEQ,IAAK,CAAC,CAAG,KAAM,CAAAjB,GAAG,CAACuB,0BAA0B,CAACC,oBAAoB,CAAC,CAC3Ef,QAAQ,CAAC,CAAEC,IAAI,CAAEN,8BAA8B,CAAEO,OAAO,CAAEM,IAAK,CAAC,CAAC,CACjE,MAAO,CAAAA,IAAI,CACf,CAAE,MAAOL,KAAK,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC,CAC9B,CACJ,CAAC"},"metadata":{},"sourceType":"module"}