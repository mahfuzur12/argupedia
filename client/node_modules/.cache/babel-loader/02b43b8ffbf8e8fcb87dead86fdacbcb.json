{"ast":null,"code":"var _jsxFileName = \"/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Graph/Graph.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nconst Graph = ({\n  startingNodeId,\n  handleNodeClick\n}) => {\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argumentSchemas = await response.json();\n        const argumentSchema = argumentSchemas.find(schema => schema._id === startingNodeId);\n        if (!argumentSchema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svgRef.current);\n        svg.selectAll('*').remove(); // Clear previous elements\n        const nodesGroup = svg.append('g');\n        renderNodes(argumentSchema, window.innerWidth / 3, window.innerHeight / 2, nodesGroup);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n    fetchData();\n  }, [startingNodeId, handleNodeClick]);\n  const renderNodes = (node, x, y, nodesGroup) => {\n    if (!node || !node._id) return;\n    nodesGroup.append('circle').attr('cx', x).attr('cy', y).attr('r', 20).attr('fill', '#1f77b4').on('click', () => {\n      if (handleNodeClick) {\n        handleNodeClick(node._id);\n      }\n    });\n    if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n      const attackerSpacing = 100;\n      const initialY = y;\n      node.isAttackedBy.forEach((attackerId, index) => {\n        const attackerNode = {\n          _id: attackerId\n        };\n        const attackerY = initialY + (index % 2 === 0 ? -1 : 1) * (index + 1) * attackerSpacing / 2;\n        const arrowStartX = x;\n        const arrowStartY = y;\n        const arrowEndX = window.innerWidth / 3;\n        const arrowEndY = attackerY;\n        const angle = Math.atan2(arrowEndY - arrowStartY, arrowEndX - arrowStartX);\n        const arrowHeadSize = 40;\n        const arrow = d3.symbol().type(d3.symbolTriangle).size(arrowHeadSize);\n        const lineData = [[arrowStartX, arrowStartY], [arrowEndX, arrowEndY]];\n        nodesGroup.append('path').attr('d', arrow).attr('transform', `translate(${arrowEndX},${arrowEndY}) rotate(${angle * (180 / Math.PI) + 90})`).attr('fill', '#000000');\n        nodesGroup.append('path').attr('d', d3.line()(lineData)).attr('stroke', '#000000').attr('stroke-width', 2);\n        renderNodes(attackerNode, arrowEndX, arrowEndY, nodesGroup);\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    style: {\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  });\n};\nexport default Graph;","map":{"version":3,"names":["React","useEffect","useRef","d3","Graph","startingNodeId","handleNodeClick","svgRef","fetchData","response","fetch","ok","Error","argumentSchemas","json","argumentSchema","find","schema","_id","svg","select","current","selectAll","remove","nodesGroup","append","renderNodes","window","innerWidth","innerHeight","error","console","node","x","y","attr","on","isAttackedBy","length","attackerSpacing","initialY","forEach","attackerId","index","attackerNode","attackerY","arrowStartX","arrowStartY","arrowEndX","arrowEndY","angle","Math","atan2","arrowHeadSize","arrow","symbol","type","symbolTriangle","size","lineData","PI","line","createElement","ref","width","height","style","border","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Graph/Graph.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst Graph = ({ startingNodeId, handleNodeClick }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argumentSchemas = await response.json();\n        const argumentSchema = argumentSchemas.find(schema => schema._id === startingNodeId);\n        if (!argumentSchema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svgRef.current);\n        svg.selectAll('*').remove(); // Clear previous elements\n        const nodesGroup = svg.append('g');\n        renderNodes(argumentSchema, window.innerWidth / 3, window.innerHeight / 2, nodesGroup);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n\n    fetchData();\n  }, [startingNodeId, handleNodeClick]);\n\n  const renderNodes = (node, x, y, nodesGroup) => {\n    if (!node || !node._id) return;\n\n    nodesGroup.append('circle')\n      .attr('cx', x)\n      .attr('cy', y)\n      .attr('r', 20)\n      .attr('fill', '#1f77b4')\n      .on('click', () => {\n        if (handleNodeClick) {\n          handleNodeClick(node._id);\n        }\n      });\n\n    if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n      const attackerSpacing = 100;\n      const initialY = y;\n\n      node.isAttackedBy.forEach((attackerId, index) => {\n        const attackerNode = { _id: attackerId };\n\n        const attackerY = initialY + (index % 2 === 0 ? -1 : 1) * (index + 1) * attackerSpacing / 2;\n\n        const arrowStartX = x;\n        const arrowStartY = y;\n        const arrowEndX = window.innerWidth / 3;\n        const arrowEndY = attackerY;\n\n        const angle = Math.atan2(arrowEndY - arrowStartY, arrowEndX - arrowStartX);\n        const arrowHeadSize = 40;\n\n        const arrow = d3.symbol().type(d3.symbolTriangle).size(arrowHeadSize);\n        const lineData = [\n          [arrowStartX, arrowStartY],\n          [arrowEndX, arrowEndY]\n        ];\n\n        nodesGroup.append('path')\n          .attr('d', arrow)\n          .attr('transform', `translate(${arrowEndX},${arrowEndY}) rotate(${angle * (180 / Math.PI) + 90})`)\n          .attr('fill', '#000000');\n\n        nodesGroup.append('path')\n          .attr('d', d3.line()(lineData))\n          .attr('stroke', '#000000')\n          .attr('stroke-width', 2);\n\n        renderNodes(attackerNode, arrowEndX, arrowEndY, nodesGroup);\n      });\n    }\n  };\n\n  return (\n    <svg ref={svgRef} width={window.innerWidth} height={window.innerHeight} style={{ border: '1px solid #ccc' }} />\n  );\n};\n\nexport default Graph;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}