{"ast":null,"code":"import React,{useEffect,useRef}from'react';import*as d3 from'd3';const Graph=_ref=>{let{startingNodeId,handleNodeClick}=_ref;const svg_ref=useRef(null);const evaluate_button_ref=useRef(null);const cleanup_ref=useRef(null);useEffect(()=>{const fetchData=async()=>{try{const response=await fetch(\"https://argupedia.onrender.com/argumentSchemas\");if(!response.ok){throw new Error('Failed to fetch argument schemas');}const argument_schemas=await response.json();const argument_schema=argument_schemas.find(schema=>schema._id===startingNodeId);if(!argument_schema){throw new Error('Argument schema not found');}const svg=d3.select(svg_ref.current);svg.selectAll('*').remove();const nodes_group=svg.append('g');const rendered_nodes=new Set();const renderNodes=(node,x,y,nodesGroup)=>{if(!node||!node._id||rendered_nodes.has(node._id))return;const radius=20;const attacker_spacing=150;if(!rendered_nodes.has(node._id)){nodesGroup.append('circle').attr('id',\"node-\".concat(node._id)).attr('cx',x).attr('cy',y).attr('r',radius).attr('fill','#1f77b4').on('click',()=>{if(handleNodeClick){handleNodeClick(node._id);}});rendered_nodes.add(node._id);}if(node.isAttackedBy&&node.isAttackedBy.length>0){const initial_y_position=y-(node.isAttackedBy.length-1)*attacker_spacing/2;node.isAttackedBy.forEach((attackerId,index)=>{if(!rendered_nodes.has(attackerId)){const attacker_node=argument_schemas.find(schema=>schema._id===attackerId);const attacker_y_position=initial_y_position+index*attacker_spacing;const arrow_start_x_position=x;const arrow_start_y_position=y;const arrow_end_x_position=x+(attacker_spacing-radius);const arrow_end_y_position=attacker_y_position;const line_length=Math.sqrt((arrow_end_x_position-arrow_start_x_position)**2+(arrow_end_y_position-arrow_start_y_position)**2);const arrowhead_x_position=arrow_start_x_position+radius/line_length*(arrow_end_x_position-arrow_start_x_position);const arrowhead_y_position=arrow_start_y_position+radius/line_length*(arrow_end_y_position-arrow_start_y_position);const angle=Math.atan2(arrow_end_y_position-arrow_start_y_position,arrow_end_x_position-arrow_start_x_position);nodesGroup.append('line').attr('x1',arrowhead_x_position).attr('y1',arrowhead_y_position).attr('x2',arrow_end_x_position).attr('y2',arrow_end_y_position).attr('stroke','#000000').attr('stroke-width',2);nodesGroup.append('path').attr('d',d3.symbol().type(d3.symbolTriangle).size(80)).attr('transform',\"translate(\".concat(arrowhead_x_position,\",\").concat(arrowhead_y_position,\") rotate(\").concat(angle*(180/Math.PI)-90,\")\")).attr('fill','#000000');const critical_question_id=attacker_node.chosenCriticalQuestion;if(critical_question_id===3||critical_question_id===8){const mid_x_position=(arrow_start_x_position+arrow_end_x_position)/2;const mid_y_position=(arrow_start_y_position+arrow_end_y_position)/2;const second_arrowhead_angle=Math.atan2(arrow_end_y_position-arrow_start_y_position,arrow_end_x_position-arrow_start_x_position);const second_arrowhead_distance=30;const second_arrowhead_x_position=mid_x_position+second_arrowhead_distance*Math.cos(second_arrowhead_angle);const second_arrowhead_y_position=mid_y_position+second_arrowhead_distance*Math.sin(second_arrowhead_angle);nodesGroup.append('path').attr('d',d3.symbol().type(d3.symbolTriangle).size(80)).attr('transform',\"translate(\".concat(second_arrowhead_x_position,\",\").concat(second_arrowhead_y_position,\") rotate(\").concat(second_arrowhead_angle*(180/Math.PI)+90,\")\")).attr('fill','#000000');}renderNodes(attacker_node,arrow_end_x_position,arrow_end_y_position,nodesGroup);}});}};const handleEvaluateGraphClick=async()=>{const evaluated_nodes=new Set();const winning_nodes=new Set();const losing_nodes=new Set();const undecided_nodes=new Set();const unevaluated_nodes=new Set(rendered_nodes);const evaluateNode=nodeId=>{if(evaluated_nodes.has(nodeId)){if(winning_nodes.has(nodeId))return'winning';if(losing_nodes.has(nodeId))return'losing';return'undecided';}evaluated_nodes.add(nodeId);unevaluated_nodes.delete(nodeId);const node=argument_schemas.find(schema=>schema._id===nodeId);if(!node){console.error('Node not found:',nodeId);return'unevaluated';}if(node.isAttackedBy.length===0){winning_nodes.add(nodeId);return'winning';}else{let attacker_evaluations=node.isAttackedBy.map(attackerId=>evaluateNode(attackerId));if(attacker_evaluations.every(status=>status==='losing')){winning_nodes.add(nodeId);return'winning';}else if(attacker_evaluations.some(status=>status==='winning')){losing_nodes.add(nodeId);return'losing';}else{undecided_nodes.add(nodeId);return'undecided';}}};evaluateNode(argument_schema._id);winning_nodes.forEach(nodeId=>d3.select(\"#node-\".concat(nodeId)).style('fill','green'));losing_nodes.forEach(nodeId=>d3.select(\"#node-\".concat(nodeId)).style('fill','red'));undecided_nodes.forEach(nodeId=>d3.select(\"#node-\".concat(nodeId)).style('fill','grey'));unevaluated_nodes.forEach(nodeId=>d3.select(\"#node-\".concat(nodeId)).style('fill','lightgrey'));// Color these nodes differently if needed\nconsole.log(\"Winning nodes:\",[...winning_nodes]);console.log(\"Losing nodes:\",[...losing_nodes]);console.log(\"Undecided nodes:\",[...undecided_nodes]);console.log(\"Unevaluated nodes:\",[...unevaluated_nodes]);console.log(\"Rendered nodes:\",[...rendered_nodes]);};if(evaluate_button_ref.current){evaluate_button_ref.current.addEventListener('click',handleEvaluateGraphClick);}cleanup_ref.current=()=>{if(evaluate_button_ref.current){evaluate_button_ref.current.removeEventListener('click',handleEvaluateGraphClick);}};renderNodes(argument_schema,window.innerWidth/3,window.innerHeight/2,nodes_group);}catch(error){console.error('Error fetching argument schemas:',error);}};fetchData();return()=>{if(cleanup_ref.current){cleanup_ref.current();}};},[startingNodeId,handleNodeClick]);return/*#__PURE__*/React.createElement(\"div\",{style:{position:'relative',width:window.innerWidth*0.95,height:window.innerHeight}},/*#__PURE__*/React.createElement(\"svg\",{ref:svg_ref,width:\"100%\",height:\"100%\",style:{border:'1px solid #ccc'}}),/*#__PURE__*/React.createElement(\"button\",{ref:evaluate_button_ref,style:{position:'absolute',top:0,right:0,padding:'10px',margin:'10px',zIndex:1000}},\"Evaluate Graph\"),/*#__PURE__*/React.createElement(\"div\",{style:{position:'absolute',top:'50px',right:'10px',zIndex:1000}},/*#__PURE__*/React.createElement(\"span\",{style:{color:'green',marginRight:'10px'}},\"Winning\"),/*#__PURE__*/React.createElement(\"span\",{style:{color:'red',marginRight:'10px'}},\"Losing\"),/*#__PURE__*/React.createElement(\"span\",{style:{color:'grey'}},\"Undecided\")));};export default Graph;","map":{"version":3,"names":["React","useEffect","useRef","d3","Graph","_ref","startingNodeId","handleNodeClick","svg_ref","evaluate_button_ref","cleanup_ref","fetchData","response","fetch","ok","Error","argument_schemas","json","argument_schema","find","schema","_id","svg","select","current","selectAll","remove","nodes_group","append","rendered_nodes","Set","renderNodes","node","x","y","nodesGroup","has","radius","attacker_spacing","attr","concat","on","add","isAttackedBy","length","initial_y_position","forEach","attackerId","index","attacker_node","attacker_y_position","arrow_start_x_position","arrow_start_y_position","arrow_end_x_position","arrow_end_y_position","line_length","Math","sqrt","arrowhead_x_position","arrowhead_y_position","angle","atan2","symbol","type","symbolTriangle","size","PI","critical_question_id","chosenCriticalQuestion","mid_x_position","mid_y_position","second_arrowhead_angle","second_arrowhead_distance","second_arrowhead_x_position","cos","second_arrowhead_y_position","sin","handleEvaluateGraphClick","evaluated_nodes","winning_nodes","losing_nodes","undecided_nodes","unevaluated_nodes","evaluateNode","nodeId","delete","console","error","attacker_evaluations","map","every","status","some","style","log","addEventListener","removeEventListener","window","innerWidth","innerHeight","createElement","position","width","height","ref","border","top","right","padding","margin","zIndex","color","marginRight"],"sources":["/home/mahfuzur/Desktop/argupedia_githubrepo/argupedia/client/src/components/Graph/Graph.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst Graph = ({ startingNodeId, handleNodeClick }) => {\n  const svg_ref = useRef(null);\n  const evaluate_button_ref = useRef(null);\n  const cleanup_ref = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://argupedia.onrender.com/argumentSchemas`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch argument schemas');\n        }\n        const argument_schemas = await response.json();\n        const argument_schema = argument_schemas.find(schema => schema._id === startingNodeId);\n        if (!argument_schema) {\n          throw new Error('Argument schema not found');\n        }\n        const svg = d3.select(svg_ref.current);\n        svg.selectAll('*').remove();\n        const nodes_group = svg.append('g');\n\n        const rendered_nodes = new Set();\n\n        const renderNodes = (node, x, y, nodesGroup) => {\n          if (!node || !node._id || rendered_nodes.has(node._id)) return;\n\n          const radius = 20;\n          const attacker_spacing = 150;\n\n          if (!rendered_nodes.has(node._id)) {\n\n            nodesGroup.append('circle')\n              .attr('id', `node-${node._id}`)\n              .attr('cx', x)\n              .attr('cy', y)\n              .attr('r', radius)\n              .attr('fill', '#1f77b4')\n              .on('click', () => {\n                if (handleNodeClick) {\n                  handleNodeClick(node._id);\n                }\n              });\n\n            rendered_nodes.add(node._id);\n          }\n\n          if (node.isAttackedBy && node.isAttackedBy.length > 0) {\n            const initial_y_position = y - (node.isAttackedBy.length - 1) * attacker_spacing / 2;\n\n            node.isAttackedBy.forEach((attackerId, index) => {\n\n              if (!rendered_nodes.has(attackerId)) {\n                const attacker_node = argument_schemas.find(schema => schema._id === attackerId);\n\n                const attacker_y_position = initial_y_position + index * attacker_spacing;\n\n                const arrow_start_x_position = x;\n                const arrow_start_y_position = y;\n                const arrow_end_x_position = x + (attacker_spacing - radius);\n                const arrow_end_y_position = attacker_y_position;\n\n                const line_length = Math.sqrt((arrow_end_x_position - arrow_start_x_position) ** 2 + (arrow_end_y_position - arrow_start_y_position) ** 2);\n\n                const arrowhead_x_position = arrow_start_x_position + (radius / line_length) * (arrow_end_x_position - arrow_start_x_position);\n                const arrowhead_y_position = arrow_start_y_position + (radius / line_length) * (arrow_end_y_position - arrow_start_y_position);\n\n                const angle = Math.atan2(arrow_end_y_position - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n\n                nodesGroup.append('line')\n                  .attr('x1', arrowhead_x_position)\n                  .attr('y1', arrowhead_y_position)\n                  .attr('x2', arrow_end_x_position)\n                  .attr('y2', arrow_end_y_position)\n                  .attr('stroke', '#000000')\n                  .attr('stroke-width', 2);\n\n                nodesGroup.append('path')\n                  .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                  .attr('transform', `translate(${arrowhead_x_position},${arrowhead_y_position}) rotate(${angle * (180 / Math.PI) - 90})`)\n                  .attr('fill', '#000000');\n\n                const critical_question_id = attacker_node.chosenCriticalQuestion;\n\n                if (critical_question_id === 3 || critical_question_id === 8) {\n\n                  const mid_x_position = (arrow_start_x_position + arrow_end_x_position) / 2;\n                  const mid_y_position = (arrow_start_y_position + arrow_end_y_position) / 2;\n\n                  const second_arrowhead_angle = Math.atan2(arrow_end_y_position - arrow_start_y_position, arrow_end_x_position - arrow_start_x_position);\n\n                  const second_arrowhead_distance = 30;\n                  const second_arrowhead_x_position = mid_x_position + second_arrowhead_distance * Math.cos(second_arrowhead_angle);\n                  const second_arrowhead_y_position = mid_y_position + second_arrowhead_distance * Math.sin(second_arrowhead_angle);\n\n                  nodesGroup.append('path')\n                    .attr('d', d3.symbol().type(d3.symbolTriangle).size(80))\n                    .attr('transform', `translate(${second_arrowhead_x_position},${second_arrowhead_y_position}) rotate(${second_arrowhead_angle * (180 / Math.PI) + 90})`)\n                    .attr('fill', '#000000');\n                }\n\n                renderNodes(attacker_node, arrow_end_x_position, arrow_end_y_position, nodesGroup);\n              }\n            });\n          }\n        };\n\n        const handleEvaluateGraphClick = async () => {\n          const evaluated_nodes = new Set(); \n          const winning_nodes = new Set();\n          const losing_nodes = new Set();\n          const undecided_nodes = new Set(); \n          const unevaluated_nodes = new Set(rendered_nodes); \n\n          const evaluateNode = (nodeId) => {\n            if (evaluated_nodes.has(nodeId)) {\n              if (winning_nodes.has(nodeId)) return 'winning';\n              if (losing_nodes.has(nodeId)) return 'losing';\n              return 'undecided'; \n            }\n        \n            evaluated_nodes.add(nodeId); \n            unevaluated_nodes.delete(nodeId); \n        \n            const node = argument_schemas.find(schema => schema._id === nodeId);\n            if (!node) {\n              console.error('Node not found:', nodeId);\n              return 'unevaluated';\n            }\n        \n            if (node.isAttackedBy.length === 0) {\n              winning_nodes.add(nodeId);\n              return 'winning';\n            } else {\n              let attacker_evaluations = node.isAttackedBy.map(attackerId => evaluateNode(attackerId));\n              \n              if (attacker_evaluations.every(status => status === 'losing')) {\n                winning_nodes.add(nodeId);\n                return 'winning';\n              } else if (attacker_evaluations.some(status => status === 'winning')) {\n                losing_nodes.add(nodeId);\n                return 'losing';\n              } else {\n                undecided_nodes.add(nodeId);\n                return 'undecided';\n              }\n            }\n          };\n        \n          evaluateNode(argument_schema._id);\n        \n          winning_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'green'));\n          losing_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'red'));\n          undecided_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'grey'));\n          unevaluated_nodes.forEach(nodeId => d3.select(`#node-${nodeId}`).style('fill', 'lightgrey')); // Color these nodes differently if needed\n        \n          console.log(\"Winning nodes:\", [...winning_nodes]);\n          console.log(\"Losing nodes:\", [...losing_nodes]);\n          console.log(\"Undecided nodes:\", [...undecided_nodes]);\n          console.log(\"Unevaluated nodes:\", [...unevaluated_nodes]);\n          console.log(\"Rendered nodes:\", [...rendered_nodes]);\n        };\n\n        if (evaluate_button_ref.current) {\n          evaluate_button_ref.current.addEventListener('click', handleEvaluateGraphClick);\n        }\n\n        cleanup_ref.current = () => {\n          if (evaluate_button_ref.current) {\n            evaluate_button_ref.current.removeEventListener('click', handleEvaluateGraphClick);\n          }\n        };\n\n        renderNodes(argument_schema, window.innerWidth / 3, window.innerHeight / 2, nodes_group);\n      } catch (error) {\n        console.error('Error fetching argument schemas:', error);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      if (cleanup_ref.current) {\n        cleanup_ref.current();\n      }\n    };\n  }, [startingNodeId, handleNodeClick]);\n\n  return (\n    <div style={{ position: 'relative', width: window.innerWidth * 0.95, height: window.innerHeight }}>\n      <svg ref={svg_ref} width=\"100%\" height=\"100%\" style={{ border: '1px solid #ccc' }} />\n      <button\n        ref={evaluate_button_ref}\n        style={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          padding: '10px',\n          margin: '10px',\n          zIndex: 1000\n        }}\n      >\n        Evaluate Graph\n      </button>\n      <div style={{ position: 'absolute', top: '50px', right: '10px', zIndex: 1000 }}>\n        <span style={{ color: 'green', marginRight: '10px' }}>Winning</span>\n        <span style={{ color: 'red', marginRight: '10px' }}>Losing</span>\n        <span style={{ color: 'grey' }}>Undecided</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAChD,MAAO,GAAK,CAAAC,EAAE,KAAM,IAAI,CAExB,KAAM,CAAAC,KAAK,CAAGC,IAAA,EAAyC,IAAxC,CAAEC,cAAc,CAAEC,eAAgB,CAAC,CAAAF,IAAA,CAChD,KAAM,CAAAG,OAAO,CAAGN,MAAM,CAAC,IAAI,CAAC,CAC5B,KAAM,CAAAO,mBAAmB,CAAGP,MAAM,CAAC,IAAI,CAAC,CACxC,KAAM,CAAAQ,WAAW,CAAGR,MAAM,CAAC,IAAI,CAAC,CAEhCD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAU,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,iDAAiD,CAAC,CAC9E,GAAI,CAACD,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,kCAAkC,CAAC,CACrD,CACA,KAAM,CAAAC,gBAAgB,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9C,KAAM,CAAAC,eAAe,CAAGF,gBAAgB,CAACG,IAAI,CAACC,MAAM,EAAIA,MAAM,CAACC,GAAG,GAAKf,cAAc,CAAC,CACtF,GAAI,CAACY,eAAe,CAAE,CACpB,KAAM,IAAI,CAAAH,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CACA,KAAM,CAAAO,GAAG,CAAGnB,EAAE,CAACoB,MAAM,CAACf,OAAO,CAACgB,OAAO,CAAC,CACtCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC,CAC3B,KAAM,CAAAC,WAAW,CAAGL,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAEnC,KAAM,CAAAC,cAAc,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAEhC,KAAM,CAAAC,WAAW,CAAGA,CAACC,IAAI,CAAEC,CAAC,CAAEC,CAAC,CAAEC,UAAU,GAAK,CAC9C,GAAI,CAACH,IAAI,EAAI,CAACA,IAAI,CAACX,GAAG,EAAIQ,cAAc,CAACO,GAAG,CAACJ,IAAI,CAACX,GAAG,CAAC,CAAE,OAExD,KAAM,CAAAgB,MAAM,CAAG,EAAE,CACjB,KAAM,CAAAC,gBAAgB,CAAG,GAAG,CAE5B,GAAI,CAACT,cAAc,CAACO,GAAG,CAACJ,IAAI,CAACX,GAAG,CAAC,CAAE,CAEjCc,UAAU,CAACP,MAAM,CAAC,QAAQ,CAAC,CACxBW,IAAI,CAAC,IAAI,SAAAC,MAAA,CAAUR,IAAI,CAACX,GAAG,CAAE,CAAC,CAC9BkB,IAAI,CAAC,IAAI,CAAEN,CAAC,CAAC,CACbM,IAAI,CAAC,IAAI,CAAEL,CAAC,CAAC,CACbK,IAAI,CAAC,GAAG,CAAEF,MAAM,CAAC,CACjBE,IAAI,CAAC,MAAM,CAAE,SAAS,CAAC,CACvBE,EAAE,CAAC,OAAO,CAAE,IAAM,CACjB,GAAIlC,eAAe,CAAE,CACnBA,eAAe,CAACyB,IAAI,CAACX,GAAG,CAAC,CAC3B,CACF,CAAC,CAAC,CAEJQ,cAAc,CAACa,GAAG,CAACV,IAAI,CAACX,GAAG,CAAC,CAC9B,CAEA,GAAIW,IAAI,CAACW,YAAY,EAAIX,IAAI,CAACW,YAAY,CAACC,MAAM,CAAG,CAAC,CAAE,CACrD,KAAM,CAAAC,kBAAkB,CAAGX,CAAC,CAAG,CAACF,IAAI,CAACW,YAAY,CAACC,MAAM,CAAG,CAAC,EAAIN,gBAAgB,CAAG,CAAC,CAEpFN,IAAI,CAACW,YAAY,CAACG,OAAO,CAAC,CAACC,UAAU,CAAEC,KAAK,GAAK,CAE/C,GAAI,CAACnB,cAAc,CAACO,GAAG,CAACW,UAAU,CAAC,CAAE,CACnC,KAAM,CAAAE,aAAa,CAAGjC,gBAAgB,CAACG,IAAI,CAACC,MAAM,EAAIA,MAAM,CAACC,GAAG,GAAK0B,UAAU,CAAC,CAEhF,KAAM,CAAAG,mBAAmB,CAAGL,kBAAkB,CAAGG,KAAK,CAAGV,gBAAgB,CAEzE,KAAM,CAAAa,sBAAsB,CAAGlB,CAAC,CAChC,KAAM,CAAAmB,sBAAsB,CAAGlB,CAAC,CAChC,KAAM,CAAAmB,oBAAoB,CAAGpB,CAAC,EAAIK,gBAAgB,CAAGD,MAAM,CAAC,CAC5D,KAAM,CAAAiB,oBAAoB,CAAGJ,mBAAmB,CAEhD,KAAM,CAAAK,WAAW,CAAGC,IAAI,CAACC,IAAI,CAAC,CAACJ,oBAAoB,CAAGF,sBAAsB,GAAK,CAAC,CAAG,CAACG,oBAAoB,CAAGF,sBAAsB,GAAK,CAAC,CAAC,CAE1I,KAAM,CAAAM,oBAAoB,CAAGP,sBAAsB,CAAId,MAAM,CAAGkB,WAAW,EAAKF,oBAAoB,CAAGF,sBAAsB,CAAC,CAC9H,KAAM,CAAAQ,oBAAoB,CAAGP,sBAAsB,CAAIf,MAAM,CAAGkB,WAAW,EAAKD,oBAAoB,CAAGF,sBAAsB,CAAC,CAE9H,KAAM,CAAAQ,KAAK,CAAGJ,IAAI,CAACK,KAAK,CAACP,oBAAoB,CAAGF,sBAAsB,CAAEC,oBAAoB,CAAGF,sBAAsB,CAAC,CAEtHhB,UAAU,CAACP,MAAM,CAAC,MAAM,CAAC,CACtBW,IAAI,CAAC,IAAI,CAAEmB,oBAAoB,CAAC,CAChCnB,IAAI,CAAC,IAAI,CAAEoB,oBAAoB,CAAC,CAChCpB,IAAI,CAAC,IAAI,CAAEc,oBAAoB,CAAC,CAChCd,IAAI,CAAC,IAAI,CAAEe,oBAAoB,CAAC,CAChCf,IAAI,CAAC,QAAQ,CAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,CAAE,CAAC,CAAC,CAE1BJ,UAAU,CAACP,MAAM,CAAC,MAAM,CAAC,CACtBW,IAAI,CAAC,GAAG,CAAEpC,EAAE,CAAC2D,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC5D,EAAE,CAAC6D,cAAc,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CACvD1B,IAAI,CAAC,WAAW,cAAAC,MAAA,CAAekB,oBAAoB,MAAAlB,MAAA,CAAImB,oBAAoB,cAAAnB,MAAA,CAAYoB,KAAK,EAAI,GAAG,CAAGJ,IAAI,CAACU,EAAE,CAAC,CAAG,EAAE,KAAG,CAAC,CACvH3B,IAAI,CAAC,MAAM,CAAE,SAAS,CAAC,CAE1B,KAAM,CAAA4B,oBAAoB,CAAGlB,aAAa,CAACmB,sBAAsB,CAEjE,GAAID,oBAAoB,GAAK,CAAC,EAAIA,oBAAoB,GAAK,CAAC,CAAE,CAE5D,KAAM,CAAAE,cAAc,CAAG,CAAClB,sBAAsB,CAAGE,oBAAoB,EAAI,CAAC,CAC1E,KAAM,CAAAiB,cAAc,CAAG,CAAClB,sBAAsB,CAAGE,oBAAoB,EAAI,CAAC,CAE1E,KAAM,CAAAiB,sBAAsB,CAAGf,IAAI,CAACK,KAAK,CAACP,oBAAoB,CAAGF,sBAAsB,CAAEC,oBAAoB,CAAGF,sBAAsB,CAAC,CAEvI,KAAM,CAAAqB,yBAAyB,CAAG,EAAE,CACpC,KAAM,CAAAC,2BAA2B,CAAGJ,cAAc,CAAGG,yBAAyB,CAAGhB,IAAI,CAACkB,GAAG,CAACH,sBAAsB,CAAC,CACjH,KAAM,CAAAI,2BAA2B,CAAGL,cAAc,CAAGE,yBAAyB,CAAGhB,IAAI,CAACoB,GAAG,CAACL,sBAAsB,CAAC,CAEjHpC,UAAU,CAACP,MAAM,CAAC,MAAM,CAAC,CACtBW,IAAI,CAAC,GAAG,CAAEpC,EAAE,CAAC2D,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC5D,EAAE,CAAC6D,cAAc,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CACvD1B,IAAI,CAAC,WAAW,cAAAC,MAAA,CAAeiC,2BAA2B,MAAAjC,MAAA,CAAImC,2BAA2B,cAAAnC,MAAA,CAAY+B,sBAAsB,EAAI,GAAG,CAAGf,IAAI,CAACU,EAAE,CAAC,CAAG,EAAE,KAAG,CAAC,CACtJ3B,IAAI,CAAC,MAAM,CAAE,SAAS,CAAC,CAC5B,CAEAR,WAAW,CAACkB,aAAa,CAAEI,oBAAoB,CAAEC,oBAAoB,CAAEnB,UAAU,CAAC,CACpF,CACF,CAAC,CAAC,CACJ,CACF,CAAC,CAED,KAAM,CAAA0C,wBAAwB,CAAG,KAAAA,CAAA,GAAY,CAC3C,KAAM,CAAAC,eAAe,CAAG,GAAI,CAAAhD,GAAG,CAAC,CAAC,CACjC,KAAM,CAAAiD,aAAa,CAAG,GAAI,CAAAjD,GAAG,CAAC,CAAC,CAC/B,KAAM,CAAAkD,YAAY,CAAG,GAAI,CAAAlD,GAAG,CAAC,CAAC,CAC9B,KAAM,CAAAmD,eAAe,CAAG,GAAI,CAAAnD,GAAG,CAAC,CAAC,CACjC,KAAM,CAAAoD,iBAAiB,CAAG,GAAI,CAAApD,GAAG,CAACD,cAAc,CAAC,CAEjD,KAAM,CAAAsD,YAAY,CAAIC,MAAM,EAAK,CAC/B,GAAIN,eAAe,CAAC1C,GAAG,CAACgD,MAAM,CAAC,CAAE,CAC/B,GAAIL,aAAa,CAAC3C,GAAG,CAACgD,MAAM,CAAC,CAAE,MAAO,SAAS,CAC/C,GAAIJ,YAAY,CAAC5C,GAAG,CAACgD,MAAM,CAAC,CAAE,MAAO,QAAQ,CAC7C,MAAO,WAAW,CACpB,CAEAN,eAAe,CAACpC,GAAG,CAAC0C,MAAM,CAAC,CAC3BF,iBAAiB,CAACG,MAAM,CAACD,MAAM,CAAC,CAEhC,KAAM,CAAApD,IAAI,CAAGhB,gBAAgB,CAACG,IAAI,CAACC,MAAM,EAAIA,MAAM,CAACC,GAAG,GAAK+D,MAAM,CAAC,CACnE,GAAI,CAACpD,IAAI,CAAE,CACTsD,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAEH,MAAM,CAAC,CACxC,MAAO,aAAa,CACtB,CAEA,GAAIpD,IAAI,CAACW,YAAY,CAACC,MAAM,GAAK,CAAC,CAAE,CAClCmC,aAAa,CAACrC,GAAG,CAAC0C,MAAM,CAAC,CACzB,MAAO,SAAS,CAClB,CAAC,IAAM,CACL,GAAI,CAAAI,oBAAoB,CAAGxD,IAAI,CAACW,YAAY,CAAC8C,GAAG,CAAC1C,UAAU,EAAIoC,YAAY,CAACpC,UAAU,CAAC,CAAC,CAExF,GAAIyC,oBAAoB,CAACE,KAAK,CAACC,MAAM,EAAIA,MAAM,GAAK,QAAQ,CAAC,CAAE,CAC7DZ,aAAa,CAACrC,GAAG,CAAC0C,MAAM,CAAC,CACzB,MAAO,SAAS,CAClB,CAAC,IAAM,IAAII,oBAAoB,CAACI,IAAI,CAACD,MAAM,EAAIA,MAAM,GAAK,SAAS,CAAC,CAAE,CACpEX,YAAY,CAACtC,GAAG,CAAC0C,MAAM,CAAC,CACxB,MAAO,QAAQ,CACjB,CAAC,IAAM,CACLH,eAAe,CAACvC,GAAG,CAAC0C,MAAM,CAAC,CAC3B,MAAO,WAAW,CACpB,CACF,CACF,CAAC,CAEDD,YAAY,CAACjE,eAAe,CAACG,GAAG,CAAC,CAEjC0D,aAAa,CAACjC,OAAO,CAACsC,MAAM,EAAIjF,EAAE,CAACoB,MAAM,UAAAiB,MAAA,CAAU4C,MAAM,CAAE,CAAC,CAACS,KAAK,CAAC,MAAM,CAAE,OAAO,CAAC,CAAC,CACpFb,YAAY,CAAClC,OAAO,CAACsC,MAAM,EAAIjF,EAAE,CAACoB,MAAM,UAAAiB,MAAA,CAAU4C,MAAM,CAAE,CAAC,CAACS,KAAK,CAAC,MAAM,CAAE,KAAK,CAAC,CAAC,CACjFZ,eAAe,CAACnC,OAAO,CAACsC,MAAM,EAAIjF,EAAE,CAACoB,MAAM,UAAAiB,MAAA,CAAU4C,MAAM,CAAE,CAAC,CAACS,KAAK,CAAC,MAAM,CAAE,MAAM,CAAC,CAAC,CACrFX,iBAAiB,CAACpC,OAAO,CAACsC,MAAM,EAAIjF,EAAE,CAACoB,MAAM,UAAAiB,MAAA,CAAU4C,MAAM,CAAE,CAAC,CAACS,KAAK,CAAC,MAAM,CAAE,WAAW,CAAC,CAAC,CAAE;AAE9FP,OAAO,CAACQ,GAAG,CAAC,gBAAgB,CAAE,CAAC,GAAGf,aAAa,CAAC,CAAC,CACjDO,OAAO,CAACQ,GAAG,CAAC,eAAe,CAAE,CAAC,GAAGd,YAAY,CAAC,CAAC,CAC/CM,OAAO,CAACQ,GAAG,CAAC,kBAAkB,CAAE,CAAC,GAAGb,eAAe,CAAC,CAAC,CACrDK,OAAO,CAACQ,GAAG,CAAC,oBAAoB,CAAE,CAAC,GAAGZ,iBAAiB,CAAC,CAAC,CACzDI,OAAO,CAACQ,GAAG,CAAC,iBAAiB,CAAE,CAAC,GAAGjE,cAAc,CAAC,CAAC,CACrD,CAAC,CAED,GAAIpB,mBAAmB,CAACe,OAAO,CAAE,CAC/Bf,mBAAmB,CAACe,OAAO,CAACuE,gBAAgB,CAAC,OAAO,CAAElB,wBAAwB,CAAC,CACjF,CAEAnE,WAAW,CAACc,OAAO,CAAG,IAAM,CAC1B,GAAIf,mBAAmB,CAACe,OAAO,CAAE,CAC/Bf,mBAAmB,CAACe,OAAO,CAACwE,mBAAmB,CAAC,OAAO,CAAEnB,wBAAwB,CAAC,CACpF,CACF,CAAC,CAED9C,WAAW,CAACb,eAAe,CAAE+E,MAAM,CAACC,UAAU,CAAG,CAAC,CAAED,MAAM,CAACE,WAAW,CAAG,CAAC,CAAExE,WAAW,CAAC,CAC1F,CAAE,MAAO4D,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CAC1D,CACF,CAAC,CAED5E,SAAS,CAAC,CAAC,CAEX,MAAO,IAAM,CACX,GAAID,WAAW,CAACc,OAAO,CAAE,CACvBd,WAAW,CAACc,OAAO,CAAC,CAAC,CACvB,CACF,CAAC,CACH,CAAC,CAAE,CAAClB,cAAc,CAAEC,eAAe,CAAC,CAAC,CAErC,mBACEP,KAAA,CAAAoG,aAAA,QAAKP,KAAK,CAAE,CAAEQ,QAAQ,CAAE,UAAU,CAAEC,KAAK,CAAEL,MAAM,CAACC,UAAU,CAAG,IAAI,CAAEK,MAAM,CAAEN,MAAM,CAACE,WAAY,CAAE,eAChGnG,KAAA,CAAAoG,aAAA,QAAKI,GAAG,CAAEhG,OAAQ,CAAC8F,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,MAAM,CAACV,KAAK,CAAE,CAAEY,MAAM,CAAE,gBAAiB,CAAE,CAAE,CAAC,cACrFzG,KAAA,CAAAoG,aAAA,WACEI,GAAG,CAAE/F,mBAAoB,CACzBoF,KAAK,CAAE,CACLQ,QAAQ,CAAE,UAAU,CACpBK,GAAG,CAAE,CAAC,CACNC,KAAK,CAAE,CAAC,CACRC,OAAO,CAAE,MAAM,CACfC,MAAM,CAAE,MAAM,CACdC,MAAM,CAAE,IACV,CAAE,EACH,gBAEO,CAAC,cACT9G,KAAA,CAAAoG,aAAA,QAAKP,KAAK,CAAE,CAAEQ,QAAQ,CAAE,UAAU,CAAEK,GAAG,CAAE,MAAM,CAAEC,KAAK,CAAE,MAAM,CAAEG,MAAM,CAAE,IAAK,CAAE,eAC7E9G,KAAA,CAAAoG,aAAA,SAAMP,KAAK,CAAE,CAAEkB,KAAK,CAAE,OAAO,CAAEC,WAAW,CAAE,MAAO,CAAE,EAAC,SAAa,CAAC,cACpEhH,KAAA,CAAAoG,aAAA,SAAMP,KAAK,CAAE,CAAEkB,KAAK,CAAE,KAAK,CAAEC,WAAW,CAAE,MAAO,CAAE,EAAC,QAAY,CAAC,cACjEhH,KAAA,CAAAoG,aAAA,SAAMP,KAAK,CAAE,CAAEkB,KAAK,CAAE,MAAO,CAAE,EAAC,WAAe,CAC5C,CACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAA3G,KAAK"},"metadata":{},"sourceType":"module"}